{
  "entity": {
    "body": ["Entity<${1|int,Guid|}>$0"],
    "prefix": "xEntity"
  },
  "auditedEntity": {
    "body": ["AuditedEntity<${1|int,Guid|}>$0"],
    "prefix": "xAuditedEntity"
  },
  "creationAuditedEntity": {
    "body": ["CreationAuditedEntity<${1|int,Guid|}>$0"],
    "prefix": "xCreationAuditedEntity"
  },
  "fullAuditedEntity": {
    "body": ["FullAuditedEntity<${1|int,Guid|}>$0"],
    "prefix": "xFullAuditedEntity"
  },
  "aggregateRoot": {
    "body": ["aggregateRoot<${1|int,Guid|}>$0"],
    "prefix": "xAggregateRoot"
  },
  "auditedAggregateRoot": {
    "body": ["AuditedAggregateRoot<${1|int,Guid|}>$0"],
    "prefix": "xAuditedAggregateRoot"
  },
  "creationAuditedAggregateRoot": {
    "body": ["CreationAuditedAggregateRoot<${1|int,Guid|}>$0"],
    "prefix": "xCreationAuditedAggregateRoot"
  },
  "fullAuditedAggregateRoot": {
    "body": ["FullAuditedAggregateRoot<${1|int,Guid|}>$0"],
    "prefix": "xFullAuditedAggregateRoot"
  },
  "iDataSeedContributor": {
    "body": "IDataSeedContributor$1",
    "prefix": "xIDataSeedContributor"
  },
  "iTransientDependency": {
    "body": "ITransientDependency$1",
    "prefix": "xITransientDependency"
  },
  "iRepository": {
    "body": "IRepository<${1:Type},${2:TypePrimaryKey}> ${3:Name}Repository$0",
    "prefix": "xIRepository"
  },
  "auditedEntityDto": {
    "body": "AuditedEntityDto<${1|int,Guid|}>$0",
    "prefix": "xAuditedEntityDto"
  },
  "creationAuditedEntityDto": {
    "body": "CreationAuditedEntityDto<${1|int,Guid|}>$0",
    "prefix": "xCreationAuditedEntityDto"
  },
  "fullAuditedEntityDto": {
    "body": "FullAuditedEntityDto<${1|int,Guid|}>$0",
    "prefix": "xFullAuditedEntityDto"
  },
  "createMapToDto": {
    "body": "CreateMap<${1:SourceType},${2:$1}Dto>();$0",
    "prefix": "xCreateMapToDto"
  },
  "createMapFromDto": {
    "body": "CreateMap<${1:SourceType}Dto,${2:$1}>();$0",
    "prefix": "xCreateMapFromDto"
  },
  "createMap": {
    "body": "CreateMap<${1:SourceType}Dto,${2:DestinationType}>();$0",
    "prefix": "xCreateMap"
  },
  "iCrudAppService": {
    "body": "public interface${1:${TM_FILENAME/.cs//}} : ICrudAppService<${1:Type}Dto, ${2|Guid,int|}$3, PagedAndSortedResultRequestDto$4, CreateUpdate${5:$1}Dto>$0",
    "prefix": "xICrudAppService"
  },
  "crudAppService": {
    "body": [
      "public class ${1:${TM_FILENAME/.cs//}} : CrudAppService<${2:Type}, ${3:$2}Dto, ${4|Guid,int|}$5, PagedAndSortedResultRequestDto$6, CreateUpdate${7:$2}Dto>, I${8:$2}AppService",
      "{",
      "\tpublic ${9:$1}(IRepository<${10:$2}, ${11:$4}> repository): base(repository)",
      "\t{",
      "\t\t// GetPolicyName = ${WORKSPACE_NAME/Project//}Permissions.${12:ClassName}.Default;",
      "\t\t// GetListPolicyName = ${WORKSPACE_NAME/Project//}Permissions.${13:$12}.Default;",
      "\t\t// CreatePolicyName = ${WORKSPACE_NAME/Project//}Permissions.${14:$12}.Create;",
      "\t\t// UpdatePolicyName = ${WORKSPACE_NAME/Project//}Permissions.${15:$12}.Edit;",
      "\t\t// DeletePolicyName = ${WORKSPACE_NAME/Project//}Permissions.${16:$12}.Delete;",
      "\t}",
      "}$0"
    ],
    "prefix": "xCrudAppService"
  },
  "inheritsApplicationTestBase": {
    "body": ": ${1:ProjectName}ApplicationTestBase$0",
    "prefix": "xInheritsApplicationTestBase"
  },
  "getRequiredService": {
    "body": "_${2:${1/(.*)/${1:/downcase}/}}AppService$3 = GetRequiredService<I${1:Name}AppService>();$0",
    "prefix": "xGetRequiredService"
  },
  "testFactMethodStub": {
    "body": [
      "[Fact$1]",
      "public async Task$2 ${3:Name_Of_Your_Test}()",
      "{",
      "\t$0",
      "}"
    ],
    "prefix": "xTestFactMethodStub"
  },
  "testVarResultGetListAsync": {
    "body": "var result = await _${1:name}AppService.GetListAsync(new PagedAndSortedResultRequestDto$2());$0",
    "prefix": "xTestVarResGetListAsync"
  },
  "testVarResultCreateAsync": {
    "body": [
      "var result = await _${3:${2/(.*)/${1:/downcase}/}}AppService.CreateAsync(",
      "\tnew ${1|CreateUpdate,Create|}${2}Dto$4",
      "\t{",
      "\t\t${5:PropertyName} = ${6:PropertyValue},",
      "\t\t$0",
      "\t}",
      ");"
    ],
    "prefix": "xTestVarResCreateAsync"
  },
  "testAssertThrowsException": {
    "body": [
      "var exception = await Assert.ThrowsAsync<AbpValidationException$1>(async () =>",
      "{",
      "\tawait _${2:name}AppService.${3|CreateAsync, GetListAsync|} (",
      "\t\tnew ${4:Name}Dto",
      "\t\t{",
      "\t\t${5:PropertyName} = ${6:PropertyValue},",
      "\t\t$7",
      "\t\t}",
      "\t);",
      "});",
      "",
      "exception.ValidationErrors.ShouldContain$8(err => err.MemberNames.Any$9(mem => mem == \"${10:$5}\"));"
    ],
    "prefix": "xTestAssertThrowsException"
  },
  "groupNamePermissionConst": {
    "body": "public const string GroupName = \"${1:GroupName}\";$0",
    "prefix": "xGroupNamePermissionConst"
  },
  "permissionClass": {
    "body": [
      "public static class ${1:ClassName}",
      "{",
      "\tpublic const string Default = GroupName + \".${2:$1}\";",
      "\tpublic const string Create = Default + \".Create\";",
      "\tpublic const string Edit = Default+ \".Edit\";",
      "\tpublic const string Delete = Default + \".Delete\";",
      "}$0"
    ],
    "prefix": "xPermissionClass"
  },
  "definePermissions": {
    "body": [
      "var ${1:groupName}Group = context.AddGroup(${3:${TM_FILENAME/PermissionDefinitionProvider.cs//}}Permissions.GroupName);",
      "",
      "var ${4:permissionName} = ${2:$1}Group.AddPermission(${8:$3}Permissions.${15:ClassName}.Default, L(\"Permission:${16:$15}\"));",
      "${5:$4}.AddChild(${9:$3}Permissions.Books.Create, L(\"Permission:${17:$15}:Create\"));",
      "${6:$4}.AddChild(${10:$3}Permissions.Books.Edit, L(\"Permission:${18:$15}:Edit\"));",
      "${7:$4}.AddChild(${11:$3}Permissions.Books.Delete, L(\"Permission:${19:$15}:Delete\"));",
      "",
      "// Translations",
      "//\"Permission:${12:$3}\": \"${13:$3}\",",
      "//\"Permission:${20:$15}\": \"${14:$3} Management\",",
      "//\"Permission:${21:$15}.Create\": \"Creating new ${24:item}s\",",
      "//\"Permission:${22:$15}.Edit\": \"Editing the ${25:$24}s\",",
      "//\"Permission:${23:$15}.Delete\": \"Deleting the ${26:$24}s\"$0"
    ],
    "prefix": "xDefinePermissions"
  },
  "canCreate": {
    "body": [
      "canCreate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME/Project//}Permissions.${2:ClassName}.Create);",
      "protected bool canCreate${3:$1};$0"
    ],
    "prefix": "xCanCreate"
  },
  "canEdit": {
    "body": [
      "canEdit${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME/Project//}Permissions.${2:ClassName}.Edit);",
      "protected bool canEdit${3:$1};$0"
    ],
    "prefix": "xCanEdit"
  },
  "canDelete": {
    "body": [
      "canDelete${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME/Project//}Permissions.${2:ClassName}.Delete);",
      "protected bool canDelete${3:$1};$0"
    ],
    "prefix": "xCanDelete"
  }
}
