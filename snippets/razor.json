{
  "authorizeAttribute": {
    "body": [
      "@attribute [Authorize(${WORKSPACE_NAME/Project//}Permissions.${1:ClassName}.Default)]",
      "@using ${2:PermissionsNameSpace}.${WORKSPACE_NAME/Project//}.Permissions",
      "@* @using Microsoft.AspNetCore.Authorization *@"
    ],
    "prefix": "xAuthorizeAttribute"
  },
  "codeBlock": {
    "body": [
      "@code {",
      "\t$0",
      "}"
    ],
    "description": "@code block",
    "prefix": "xCode"
  },
  "createModalDialog": {
    "body": [
      "<Modal @ref=\"CreateModal\">",
      "    <ModalBackdrop />",
      "    <ModalContent IsCentered=\"true\" Size=\"ModalSize.${2|None,Default,Small,Large,ExtraLarge|}\">",
      "        <ModalHeader>",
      "            <ModalTitle>@L[\"New${1:Type}\"]</ModalTitle>",
      "            <CloseButton Clicked=\"CloseCreateModalAsync\" />",
      "        </ModalHeader>",
      "        <ModalBody>",
      "           <Row>",
      "             <Column ColumnSize=\"ColumnSize.Is12\">",
      "             $0@* <Field> *@",
      "             @*   <FieldLabel>@L[\"Name\"]</FieldLabel> *@",
      "             @*   <TextEdit @bind-text=\"NewEntity.Name\" /> *@",
      "             @* </Field> *@",
      "             </Column>",
      "           </Row>",
      "        </ModalBody>",
      "        <ModalFooter>",
      "            <Button Color=\"Color.Secondary\" Clicked=\"CloseCreateModalAsync\">@L[\"Cancel\"]</Button>",
      "            <Button Color=\"Color.Primary\" Clicked=\"CreateEntityAsync\">@L[\"Save\"]</Button>",
      "        </ModalFooter>",
      "    </ModalContent>",
      "</Modal>"
    ],
    "description": "Create modal dialog",
    "prefix": "xCreateModalDialog"
  },
  "dataGridColumn": {
    "body": "<DataGridColumn TItem=\"${1:Type}Dto\" Field=\"@nameof($1Dto.${2:PropertyName})\" Caption=\"@L[\"$2\"]\"></DataGridColumn>",
    "description": "DataGridColumn",
    "prefix": "xDataGridColumn"
  },
  "dateField": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"$2}\"]</FieldLabel>",
      "  <DateEdit TValue=\"DateTime\" @bind-Date=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a TextEdit field in a Create/Update dialog",
    "prefix": "xDateField"
  },
  "ifCanCreate": {
    "body": [
      "@if (canCreate${1:What})",
      "{",
      "\t$0",
      "}"
    ],
    "prefix": "xIfCanCreate"
  },
  "ifCanDelete": {
    "body": [
      "@if (canDelete${1:What})",
      "{",
      "\t$0",
      "}"
    ],
    "prefix": "xIfCanDelete"
  },
  "ifCanUpdate": {
    "body": [
      "@if (canUpdate${1:What})",
      "{",
      "\t$0",
      "}"
    ],
    "prefix": "xIfCanUpdate"
  },
  "injectAuthorizationService": {
    "body": [
      "@* uncomment line below or add to _imports.razor *@",
      "@* @using Microsoft.AspNetCore.Authorization *@",
      "@inject IAuthorizationService AuthorizationService"
    ],
    "prefix": "xInjAuthorizationService"
  },
  "listPage": {
    "body": [
      "@* translations *@",
      "@* \"New$1\": \"New $1\", *@",
      "@page \"/${TM_FILENAME_BASE/(.*)/${1:/downcase}/}\"",
      "@using Volo.Abp.Application.Dtos",
      "@using Volo.Abp.BlazoriseUI",
      "@using ${WORKSPACE_NAME}.Domain",
      "@using ${WORKSPACE_NAME}.Localization",
      "@using ${WORKSPACE_NAME}.Permissions",
      "@using Microsoft.AspNetCore.Authorization",
      "@using Microsoft.Extensions.Localization",
      "@inject IStringLocalizer<${WORKSPACE_NAME}Resource> L",
      "@inherits AbpCrudPageBase<I${1:TypeName}AppService, $1Dto, int, PagedAndSortedResultRequestDto, Create$1Dto, Update$1Dto>",
      "",
      "<Card>",
      "    <CardHeader>",
      "        <Row>",
      "          <Column ColumnSize=\"ColumnSize.Is6\">",
      "              <h2>@L[\"$1s\"]</h2>",
      "          </Column>",
      "          <Column ColumnSize=\"ColumnSize.Is6\">",
      "              <Paragraph Alignment=\"TextAlignment.Right\">",
      "                  @if (canCreate$1)",
      "                  {",
      "                      <Button Color=\"Color.Primary\" Clicked=\"OpenCreateModalAsync\">@L[\"New$1\"]</Button>",
      "                  }",
      "              </Paragraph>",
      "          </Column>",
      "        </Row>",
      "    </CardHeader>",
      "",
      "    <CardBody>",
      "        <DataGrid TItem=\"$1Dto\" Data=\"Entities\" ReadData=\"OnDataGridReadAsync\" TotalItems=\"TotalCount\" ShowPager=\"true\" PageSize=\"PageSize\">",
      "            <DataGridColumns>",
      "                <DataGridColumn Width=\"150px\" TItem=\"$1Dto\" Field=\"@nameof($1Dto.Id)\" Sortable=\"true\" Caption=\"@L[\"Actions\"]\">",
      "                    <DisplayTemplate>",
      "                        <Dropdown>",
      "                            <DropdownToggle Color=\"Color.Primary\">",
      "                                @L[\"Actions\"]",
      "                            </DropdownToggle>",
      "                            <DropdownMenu>",
      "                                @if (canUpdate$1)",
      "                                {",
      "                                    <DropdownItem Clicked=\"() => OpenEditModalAsync(context.Id)\">",
      "                                        @L[\"Edit\"]",
      "                                    </DropdownItem>",
      "                                }",
      "                                @if (canDelete$1)",
      "                                {",
      "                                    <DropdownItem Clicked=\"() => DeleteEntityAsync(context)\">",
      "                                        @L[\"Delete\"]",
      "                                    </DropdownItem>",
      "                                }",
      "                            </DropdownMenu>",
      "                        </Dropdown>",
      "                    </DisplayTemplate>",
      "                </DataGridColumn>",
      "                <DataGridColumn TItem=\"$1Dto\" Field=\"@nameof($1Dto.${2:PropertyName})\" Caption=\"@L[\"$2\"]\"></DataGridColumn>",
      "            </DataGridColumns>",
      "        </DataGrid>",
      "    </CardBody>",
      "</Card>",
      "",
      "@code",
      "{",
      "  protected bool canCreate$1;",
      "  protected bool canUpdate$1;",
      "  protected bool canDelete$1;",
      "",
      "  protected override async Task OnInitializedAsync()",
      "  {",
      "    await base.OnInitializedAsync();",
      "",
      "    canCreate$1 =await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$1.Create);",
      "    canUpdate$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$1.Update);",
      "    canDelete$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$1.Delete);",
      "  }",
      "}"
    ],
    "prefix": "xListPage"
  },
  "numericField": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"$2\"]</FieldLabel>",
      "  <NumericEdit TValue=\"${3:NumericType}\" @bind-Value=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a NumericEdit field in a Create/Update dialog",
    "prefix": "xNumericField"
  },
  "selectEnumField": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"$2\"]</FieldLabel>",
      "  <Select TValue=\"${3:Type}\" @bind-SelectedValue=\"@${1|NewEntity,EditingEntity|}.$2\">",
      "    @foreach (int enumValue in Enum.GetValues(typeof($3)))",
      "    {",
      "      <SelectItem TValue=\"$3\" Value=\"@(($3)enumValue)\">",
      "          @L[$\"Enum:$3:{enumValue}\"]",
      "      </SelectItem>",
      "    }",
      "  </Select>",
      "</Field>"
    ],
    "description": "Inserts a Select field for enum in a Create/Update dialog",
    "prefix": "xSelectEnumField"
  },
  "textField": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"$2}\"]</FieldLabel>",
      "  <TextEdit @bind-text=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a TextEdit field in a Create/Update dialog",
    "prefix": "xTextField"
  },
  "updateModalDialog": {
    "body": [
      "<Modal @ref=\"EditModal\">",
      "  <ModalBackdrop />",
      "  <ModalContent IsCentered=\"true\" Size=\"ModalSize.${2|None,Default,Small,Large,ExtraLarge|}\">",
      "      <ModalHeader>",
      "          <ModalTitle>@EditingEntity.${1:PropertyName}</ModalTitle>",
      "          <CloseButton Clicked=\"CloseEditModalAsync\" />",
      "      </ModalHeader>",
      "      <ModalBody>",
      "       <Row>",
      "         <Column ColumnSize=\"ColumnSize.Is12\">",
      "           $0@* <Field> *@",
      "           @*   <FieldLabel>@L[\"Name\"]</FieldLabel> *@",
      "           @*   <TextEdit @bind-text=\"NewEntity.Name\" /> *@",
      "           @* </Field> *@",
      "         </Column>",
      "       </Row>",     
      "      </ModalBody>",
      "      <ModalFooter>",
      "          <Button Color=\"Color.Secondary\" Clicked=\"CloseEditModalAsync\">@L[\"Cancel\"]</Button>",
      "          <Button Color=\"Color.Primary\" Clicked=\"UpdateEntityAsync\">@L[\"Save\"]</Button>",
      "      </ModalFooter>",
      "  </ModalContent>",
      "</Modal>"
    ],
    "description": "Update modal dialog",
    "prefix": "xUpdateModalDialog"
  }
}