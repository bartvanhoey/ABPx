{
  "authorizeAttribute": {
    "body": [
      "@attribute [Authorize(${WORKSPACE_NAME}Permissions.${1:ClassName}.Default)]",
      "@using ${2:PermissionsNameSpace}.${WORKSPACE_NAME}.Permissions",
      "@* @using Microsoft.AspNetCore.Authorization *@"
    ],
    "prefix": "xAuthorizeAttribute"
  },
  "codeBlock": {
    "body": ["@code {", "\t$0", "}"],
    "description": "@code block",
    "prefix": "xCode"
  },
  "createModalDialog": {
    "body": [
      "<Modal @ref=\"@CreateModal\">",
      "    <ModalBackdrop />",
      "    <ModalContent IsCentered=\"true\" Size=\"ModalSize.${2|None,Default,Small,Large,ExtraLarge|}\">",
      "        <ModalHeader>",
      "            <ModalTitle>@L[\"New${1:Type}\"]</ModalTitle>",
      "            <CloseButton Clicked=\"CloseCreateModalAsync\" />",
      "        </ModalHeader>",
      "        <ModalBody>",
      "          <Validations @ref=\"@CreateValidationsRef\" Model=\"@NewEntity\" ValidateOnLoad=\"false\">",
      "           <Row>",
      "             <Column ColumnSize=\"ColumnSize.Is12\">",
      "               <Validation MessageLocalizer=\"@LH.Localize\">",
      "               @*  <Field>",
      "                     <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}Name\"]</FieldLabel>",
      "                     <TextEdit @bind-text=\"@NewEntity.${3:PropertyName}\" />",
      "                       <Feedback>",
      "                         <ValidationError/>",
      "                       </Feedback>",
      "                   </Field> *@",
      "                 </Validation>",
      "             </Column>",
      "           </Row>",
      "         </Validations>",
      "        </ModalBody>",
      "        <ModalFooter>",
      "            <Button Color=\"Color.Secondary\" Clicked=\"CloseCreateModalAsync\">@L[\"Cancel\"]</Button>",
      "            <Button Color=\"Color.Primary\" Type=\"@ButtonType.Submit\" PreventDefaultOnSubmit=\"true\" Clicked=\"CreateEntityAsync\">@L[\"Save\"]</Button>",
      "        </ModalFooter>",
      "    </ModalContent>",
      "</Modal>$0"
    ],
    "description": "Create modal dialog",
    "prefix": "xCreateModalDialog"
  },
  "dataGridColumn": {
    "body": "<DataGridColumn TItem=\"${1:Type}Dto\" Field=\"@nameof($1Dto.${2:PropertyName})\" Caption=\"@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}${3:$2}\"]\"></DataGridColumn>",
    "description": "Inserts a DataGridColumn",
    "prefix": "xDataGridColumn"
  },
  "dataGridColumnEnum": {
    "body": [
      "<DataGridColumn TItem=\"${1:Type}Dto\" Field=\"@nameof($1Dto.${2:PropertyName})\" Caption=\"@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}${3:$2}\"]\">",
      "\t<DisplayTemplate>",
      "\t\t@L[$\"Enum:${4:EnumName}:{(int)context.$2}\"]",
      "\t</DisplayTemplate>",
      "</DataGridColumn>"
    ],
    "description": "Inserts a DataGridColumn for an enum",
    "prefix": "xDataGridColumnEnum"
  },
  "dataGridColumnLongDate": {
    "body": [
      "<DataGridColumn TItem=\"${1:Type}Dto\" Field=\"@nameof($1Dto.${2:PropertyName})\" Caption=\"@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}${3:$2}\"]\">",
      "\t<DisplayTemplate>",
      "\t\t@context.$2.ToLongDateString()",
      "\t</DisplayTemplate>",
      "</DataGridColumn>"
    ],
    "description": "Inserts a DataGridColumn in long date format",
    "prefix": "xDataGridColumnLongDateString"
  },
  "dataGridColumnShortDate": {
    "body": [
      "<DataGridColumn TItem=\"${1:Type}Dto\" Field=\"@nameof($1Dto.${2:PropertyName})\" Caption=\"@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}${3:$2}\"]\">",
      "\t<DisplayTemplate>",
      "\t\t@context.$2.ToShortDateString()",
      "\t</DisplayTemplate>",
      "</DataGridColumn>"
    ],
    "description": "Inserts a DataGridColumn in short date format",
    "prefix": "xDataGridColumnShortDateString"
  },
  "fieldDateEdit": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$2\"]</FieldLabel>",
      "  <DateEdit TValue=\"${3|DateTime,DateTime?|}\" @bind-Date=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a TextEdit field in a Create/Update dialog",
    "prefix": "xFieldDateEdit"
  },
  "fieldEnumSelect": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$2\"]</FieldLabel>",
      "  <Select TValue=\"${3:Type}\" @bind-SelectedValue=\"@${1|NewEntity,EditingEntity|}.${2:PropertyName}\">",
      "    @foreach (int value in Enum.GetValues(typeof($3)))",
      "    {",
      "      <SelectItem TValue=\"$3\" Value=\"@(($3)value)\">",
      "          @L[$\"Enum:$3:{value}\"]",
      "      </SelectItem>",
      "    }",
      "  </Select>",
      "</Field>"
    ],
    "description": "Inserts a Select field for enum in a Create/Update dialog",
    "prefix": "xFieldEnumSelect"
  },
  "fieldNumericEdit": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$2\"]</FieldLabel>",
      "  <NumericEdit TValue=\"${3|int,int?,float,long,long?,decimal,decimal?|}\" @bind-Value=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a NumericEdit field in a Create/Update dialog",
    "prefix": "xFieldNumericEdit"
  },
  "fieldSelect": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$2\"]</FieldLabel>",
      "  <Select TValue=\"${3:Type}\" @bind-SelectedValue=\"@${1|NewEntity,EditingEntity|}.${2:PropertyName}Id\">",
      "    @foreach (var value in ${4:${2/(.*)/${1:/downcase}/}}List)",
      "    {",
      "      <SelectItem TValue=\"$3\" Value=\"@value.Id\">",
      "          @value.${5:PropertyName}",
      "      </SelectItem>",
      "    }",
      "  </Select>",
      "</Field>"
    ],
    "description": "Inserts a Select field a Create/Update dialog",
    "prefix": "xFieldSelect"
  },
  "fieldTextEdit": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$2\"]</FieldLabel>",
      "  <TextEdit @bind-text=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a TextEdit field in a Create/Update dialog",
    "prefix": "xFieldTextEdit"
  },
  "fieldMemoEdit": {
    "body": [
      "<Field>",
      "  <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$2\"]</FieldLabel>",
      "  <MemoEdit Rows=\"${3:5}\" @bind-text=\"${1|NewEntity,EditingEntity|}.${2:PropertyName}\" />",
      "</Field>"
    ],
    "description": "Inserts a MemoEdit field in a Create/Update dialog",
    "prefix": "xFieldMemoEdit"
  },
  "ifCanCreate": {
    "body": ["@if (CanCreate${1:What})", "{", "\t$0", "}"],
    "description": "If CanCreate",
    "prefix": "xIfCanCreate"
  },
  "ifCanDelete": {
    "body": ["@if (CanDelete${1:What})", "{", "\t$0", "}"],
    "description": "If CanDelete",
    "prefix": "xIfCanDelete"
  },
  "ifCanUpdate": {
    "body": ["@if (CanUpdate${1:What})", "{", "\t$0", "}"],
    "description": "If CanUpdate",
    "prefix": "xIfCanUpdate"
  },
  "inheritsComponentBase": {
    "body": ["@inherits ${WORKSPACE_NAME}ComponentBase"],
    "description": "Inserts @inherits [YourProjectName]ComponentBase statement",
    "prefix": "xInheritsComponentBase"
  },
  "injectAuthorizationService": {
    "body": [
      "@* uncomment line below or add to _imports.razor *@",
      "@* @using Microsoft.AspNetCore.Authorization *@",
      "@inject IAuthorizationService AuthorizationService"
    ],
    "description": "Injects interface IAuthorizationService",
    "prefix": "xInjAuthorizationService"
  },
  "listAbpCrudPageBase": {
    "body": [
      "@* \"New$1\": \"New ${4:${1/(.*)/${1:/downcase}/}}\", *@",
      "@page \"/${TM_FILENAME_BASE/(.*)/${1:/downcase}/}\"",
      "@* @attribute [Authorize(${WORKSPACE_NAME}Permissions.$1.Default)] *@",
      "@using Volo.Abp.Application.Dtos",
      "@using Volo.Abp.BlazoriseUI",
      "@* below namespace where I$1AppService exists *@",
      "@using ${WORKSPACE_NAME}.Application.Contracts.${2:${TM_FILENAME_BASE}}",
      "@* @using ${WORKSPACE_NAME}.Application.Contracts.$2.Dtos *@",
      "@using ${WORKSPACE_NAME}.Domain.Shared.$2",
      "@using ${WORKSPACE_NAME}.Localization",
      "@using ${WORKSPACE_NAME}.Permissions",
      "@using Microsoft.AspNetCore.Authorization",
      "@using Microsoft.Extensions.Localization",
      "@inject IStringLocalizer<${WORKSPACE_NAME}Resource> L",
      "@inject AbpBlazorMessageLocalizerHelper<${WORKSPACE_NAME}Resource> LH",
      "@inherits AbpCrudPageBase<I${1:TypeName}AppService, $1Dto, ${3|int,Guid,string|}, PagedAndSortedResultRequestDto, Create$1Dto, Update$1Dto>",
      "@*  @inherits AbpCrudPageBase<I$1AppService, $1Dto, $3, PagedAndSortedResultRequestDto, CreateUpdate$1Dto> *@",
      "",
      "<Card>",
      "    <CardHeader>",
      "        <Row  Class=\"justify-content-between\">",
      "          <Column ColumnSize=\"ColumnSize.IsAuto\">",
      "              <h2>@L[\"$1s\"]</h2>",
      "          </Column>",
      "          <Column ColumnSize=\"ColumnSize.IsAuto\">",
      "                  @if (HasCreatePermission)",
      "                  {",
      "                      <Button Color=\"Color.Primary\" Clicked=\"OpenCreateModalAsync\">@L[\"New$1\"]</Button>",
      "                  }",
      "          </Column>",
      "        </Row>",
      "    </CardHeader>",
      "",
      "    <CardBody>",
      "        <DataGrid TItem=\"$1Dto\" Data=\"Entities\" ReadData=\"OnDataGridReadAsync\" TotalItems=\"TotalCount\" ShowPager=\"true\" PageSize=\"PageSize\">",
      "           <DataGridColumns>",
      "             <DataGridEntityActionsColumn TItem=\"$1Dto\" @ref=\"@EntityActionsColumn\">",
      "               <DisplayTemplate>",
      "                 <EntityActions TItem=\"$1Dto\" EntityActionsColumn=\"@EntityActionsColumn\">",
      "                     <EntityAction TItem=\"$1Dto\" Text=\"@L[\"Edit\"]\" RequiredPolicy=\"@UpdatePolicyName\" Clicked=\"() => OpenEditModalAsync(context)\" />",
      "                     <EntityAction TItem=\"$1Dto\" Text=\"@L[\"Delete\"]\" RequiredPolicy=\"@DeletePolicyName\" Clicked=\"() => DeleteEntityAsync(context)\" ConfirmationMessage=\"() => GetDeleteConfirmationMessage(context)\" />",
      "                 </EntityActions>",
      "               </DisplayTemplate>",
      "             </DataGridEntityActionsColumn>",
      "             @*<DataGridColumn TItem=\"$1Dto\" Field=\"@nameof($1Dto.${5:PropertyName})\" Caption=\"@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$5\"]\"></DataGridColumn> *@",
      "           </DataGridColumns>",
      "        </DataGrid>",
      "    </CardBody>",
      "</Card>",
      "",
      "$0",
      "",
      "@code",
      "{",
      "  public ${TM_FILENAME_BASE}()",
      "  {",
      "    // CreatePolicyName = ${WORKSPACE_NAME}Permissions.$1.Create;",
      "    // UpdatePolicyName = ${WORKSPACE_NAME}Permissions.$1.Update;",
      "    // DeletePolicyName = ${WORKSPACE_NAME}Permissions.$1.Delete;",
      "  }",
      "}"
    ],
    "description": "Inserts a paged list for a standard CrudAppService",
    "prefix": "xListAbpCrudPageBase"
  },
  "listIAppService": {
    "body": [
      "@* \"New$1\": \"New ${3:${1/(.*)/${1:/downcase}/}}\",",
      "   \"$1DeletionConfirmationMessage\": \"Are you sure to delete the ${3:${1/(.*)/${1:/downcase}/}} '{0}'?\", *@",
      "@page \"/${TM_FILENAME_BASE/(.*)/${1:/downcase}/}\"",
      "@* below namespace where I$1AppService exists *@",
      "@using ${WORKSPACE_NAME}.Application.Contracts.${2:${TM_FILENAME_BASE}}",
      "@* @using ${WORKSPACE_NAME}.Application.Contracts.${2:${TM_FILENAME_BASE}}.Dtos *@",
      "@inherits ${WORKSPACE_NAME}ComponentBase",
      "@using ${WORKSPACE_NAME}.Localization",
      "@using Microsoft.AspNetCore.Authorization",
      "@using Microsoft.Extensions.Localization",
      "@using Permissions",
      "@using Volo.Abp.Application.Dtos",
      "@using Volo.Abp.ObjectMapping",
      "@inject I${1:TypeName}AppService $1AppService",
      "",
      "<Card>",
      "    <CardHeader>",
      "        <Row>",
      "          <Column ColumnSize=\"ColumnSize.Is6\">",
      "              <h2>@L[\"$1s\"]</h2>",
      "          </Column>",
      "          <Column ColumnSize=\"ColumnSize.Is6\">",
      "              <Paragraph Alignment=\"TextAlignment.Right\">",
      "                  @if (CanCreate$1)",
      "                  {",
      "                      <Button Color=\"Color.Primary\" Clicked=\"OpenCreateModal\">@L[\"New$1\"]</Button>",
      "                  }",
      "              </Paragraph>",
      "          </Column>",
      "        </Row>",
      "    </CardHeader>",
      "",
      "    <CardBody>",
      "        <DataGrid TItem=\"$1Dto\" Data=\"$1List\" ReadData=\"OnDataGridReadAsync\" TotalItems=\"TotalCount\" ShowPager=\"true\" PageSize=\"PageSize\">",
      "            <DataGridColumns>",
      "                <DataGridColumn Width=\"150px\" TItem=\"$1Dto\" Field=\"@nameof($1Dto.Id)\" Sortable=\"true\" Caption=\"@L[\"Actions\"]\">",
      "                    <DisplayTemplate>",
      "                        <Dropdown>",
      "                            <DropdownToggle Color=\"Color.Primary\">",
      "                                @L[\"Actions\"]",
      "                            </DropdownToggle>",
      "                            <DropdownMenu>",
      "                                @if (CanUpdate$1)",
      "                                {",
      "                                    <DropdownItem Clicked=\"() => OpenEditModal(context)\">",
      "                                        @L[\"Edit\"]",
      "                                    </DropdownItem>",
      "                                }",
      "                                @if (CanDelete$1)",
      "                                {",
      "                                    <DropdownItem Clicked=\"() => Delete$1Async(context)\">",
      "                                        @L[\"Delete\"]",
      "                                    </DropdownItem>",
      "                                }",
      "                            </DropdownMenu>",
      "                        </Dropdown>",
      "                    </DisplayTemplate>",
      "                </DataGridColumn>",
      "                <DataGridColumn TItem=\"$1Dto\" Field=\"@nameof($1Dto.${4:PropertyName})\" Caption=\"@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$4\"]\"></DataGridColumn>",
      "            </DataGridColumns>",
      "        </DataGrid>",
      "    </CardBody>",
      "</Card>",
      "",
      "<Modal @ref=\"CreateModal\">",
      "    <ModalBackdrop />",
      "    <ModalContent IsCentered=\"true\" Size=\"ModalSize.${5|None,Default,Small,Large,ExtraLarge|}\">",
      "        <ModalHeader>",
      "            <ModalTitle>@L[\"New$1\"]</ModalTitle>",
      "            <CloseButton Clicked=\"CloseCreateModalAsync\" />",
      "        </ModalHeader>",
      "        <ModalBody>",
      "           <Row>",
      "             <Column ColumnSize=\"ColumnSize.Is12\">",
      "             $0@* <Field>",
      "                   <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}Name\"]</FieldLabel>",
      "                   <TextEdit @bind-text=\"@NewEntity.$4\" />",
      "                   </Field> *@",
      "             </Column>",
      "           </Row>",
      "        </ModalBody>",
      "        <ModalFooter>",
      "            <Button Color=\"Color.Secondary\" Clicked=\"CloseCreateModalAsync\">@L[\"Cancel\"]</Button>",
      "            <Button Color=\"Color.Primary\" Clicked=\"CreateEntityAsync\">@L[\"Save\"]</Button>",
      "        </ModalFooter>",
      "    </ModalContent>",
      "</Modal>",
      "",
      "",
      "<Modal @ref=\"EditModal\">",
      "  <ModalBackdrop />",
      "  <ModalContent IsCentered=\"true\" Size=\"ModalSize.${6|None,Default,Small,Large,ExtraLarge|}\">",
      "      <ModalHeader>",
      "          <ModalTitle>@EditingEntity.$4</ModalTitle>",
      "          <CloseButton Clicked=\"CloseEditModalAsync\" />",
      "      </ModalHeader>",
      "      <ModalBody>",
      "       <Row>",
      "         <Column ColumnSize=\"ColumnSize.Is12\">",
      "           $0@* <Field>",
      "                <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$1\"]</FieldLabel>",
      "                <TextEdit @bind-text=\"@EditingEntity.$4\" />",
      "              </Field> *@",
      "         </Column>",
      "       </Row>",
      "      </ModalBody>",
      "      <ModalFooter>",
      "          <Button Color=\"Color.Secondary\" Clicked=\"CloseEditModalAsync\">@L[\"Cancel\"]</Button>",
      "          <Button Color=\"Color.Primary\" Clicked=\"UpdateEntityAsync\">@L[\"Save\"]</Button>",
      "      </ModalFooter>",
      "  </ModalContent>",
      "</Modal>",
      "",
      "@code",
      "{",
      "  protected IReadOnlyList<$1Dto> $1List { get; set; }",
      "  protected  int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;",
      "  protected  int CurrentPage { get; set; }",
      "  protected  string CurrentSorting { get; set; }",
      "  protected int TotalCount { get; set; }",
      "  protected bool CanCreate$1 = true;",
      "  protected bool CanUpdate$1 = true;",
      "  protected bool CanDelete$1 = true;",
      "",
      "  protected Create$1Dto NewEntity { get; set; }  = new Create$1Dto();",
      "",
      "  protected Guid Editing$1Id { get; set; }",
      "  protected Update$1Dto EditingEntity { get; set; } = new Update$1Dto();",
      "",
      "  protected Modal CreateModal { get; set; }",
      "  protected Modal EditModal { get; set; }",
      "",
      "  protected override async Task OnInitializedAsync()",
      "  {",
      "    await SetPermissionsAsync();",
      "    await Get$1sAsync();",
      "",
      "  }",
      "",
      "   protected async Task SetPermissionsAsync()",
      "   {",
      "     // CanCreate$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$1.Create);",
      "     // CanUpdate$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$1.Update);",
      "     // CanDelete$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$1.Delete);",
      "   }",
      "",
      "   protected void OpenCreateModal()",
      "   {",
      "      New$1 = new Create$1Dto();",
      "      CreateModal.Show();",
      "   }",
      "",
      "   protected void CloseCreateModalAsync()",
      "   {",
      "      CreateModal.Hide();",
      "   }",
      "",
      "   protected void OpenEditModal($1Dto ${1/(.*)/${1:/downcase}/})",
      "   {",
      "      Editing$1Id = ${1/(.*)/${1:/downcase}/}.Id;",
      "      Editing$1 = ObjectMapper.Map<$1Dto, Update$1Dto>(${1/(.*)/${1:/downcase}/});",
      "      EditModal.Show();",
      "   }",
      "",
      "   protected async Task Delete$1Async($1Dto ${1/(.*)/${1:/downcase}/})",
      "   {",
      "      var confirmMessage = L[\"$1DeletionConfirmationMessage\", ${1/(.*)/${1:/downcase}/}.$4];",
      "      if (!await Message.Confirm(confirmMessage))",
      "      {",
      "          return;",
      "      }",
      "",
      "      await $1AppService.DeleteAsync(${1/(.*)/${1:/downcase}/}.Id);",
      "      await Get$1sAsync();",
      "   }",
      "",
      "   protected async Task Get$1sAsync()",
      "   {",
      "       var result = await $1AppService.GetListAsync(",
      "           new Get$1ListDto",
      "           {",
      "               MaxResultCount = PageSize,",
      "               SkipCount = CurrentPage * PageSize,",
      "               Sorting = CurrentSorting",
      "           }",
      "       );",
      "",
      "       $1List = result.Items;",
      "       TotalCount = (int)result.TotalCount;",
      "   }",
      "",
      "      protected async Task OnDataGridReadAsync(DataGridReadDataEventArgs<$1Dto> e)",
      "      {",
      "          CurrentSorting = e.Columns",
      "              .Where(c => c.Direction != SortDirection.None)",
      "              .Select(c => c.Field + (c.Direction == SortDirection.Descending ? \"DESC\" : \"\"))",
      "              .JoinAsString(\",\");",
      "          CurrentPage = e.Page - 1;",
      "",
      "          await Get$1sAsync();",
      "",
      "          StateHasChanged();",
      "      }",
      "",
      "      protected void CloseEditModalAsync()",
      "      {",
      "         EditModal.Hide();",
      "      }",
      "",
      "      protected async Task CreateEntityAsync()",
      "      {",
      "        await $1AppService.CreateAsync(New$1);",
      "        await Get$1sAsync();",
      "        CreateModal.Hide();",
      "      }",
      "",
      "      protected async Task UpdateEntityAsync()",
      "      {",
      "        await $1AppService.UpdateAsync(Editing$1Id, Editing$1);",
      "        await Get$1sAsync();",
      "       EditModal.Hide();",
      "      }",
      "",
      "}"
    ],
    "description": "Inserts a paged list for a custom IAppService",
    "prefix": "xListIAppService"
  },
  "pageDirective": {
    "body": [
      "@page \"/${TM_FILENAME_BASE/(.*)/${1:/downcase}/}\"",
      "@inherits ${WORKSPACE_NAME}ComponentBase"
    ],
    "description": "Inserts @page directive",
    "prefix": "xPage"
  },
  "feedbackValidation": {
    "body": [
      "<Feedback>",
      "\t<ValidationError/>",
      "</Feedback>"
    ],
    "description": "Inserts <Feedback> validation statement",
    "prefix": "xFeedbackValidation"
  },
  "pageDirectiveWithParameter": {
    "body": [
      "@page \"/${1:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}}/{${2:Id}:${3|int,bool,datetime,decimal,double,float,guid,long|}}\"",
      "@inherits ${WORKSPACE_NAME}ComponentBase"
    ],
    "description": "Inserts @page directive with Parameter",
    "prefix": "xPageParam"
  },
  "updateModalDialog": {
    "body": [
      "<Modal @ref=\"@EditModal\">",
      "  <ModalBackdrop />",
      "  <ModalContent IsCentered=\"true\" Size=\"ModalSize.${2|None,Default,Small,Large,ExtraLarge|}\">",
      "      <ModalHeader>",
      "          <ModalTitle>@EditingEntity.${1:PropertyName}</ModalTitle>",
      "          <CloseButton Clicked=\"CloseEditModalAsync\" />",
      "      </ModalHeader>",
      "      <ModalBody>",
      "          <Validations @ref=\"@EditValidationsRef\" Model=\"@EditingEntity\" ValidateOnLoad=\"false\">",
      "             <Row>",
      "               <Column ColumnSize=\"ColumnSize.Is12\">",
      "                 <Validation MessageLocalizer=\"@LH.Localize\">",
      "                 @* <Field>",
      "                       <FieldLabel>@L[\"${TM_FILENAME/(.*)s\\..+$/$1/}$1\"]</FieldLabel>",
      "                       <TextEdit @bind-text=\"EditingEntity.${3:$1}\" />",
      "                       <Feedback>",
      "                         <ValidationError/>",
      "                       </Feedback>",
      "                   </Field> *@",
      "                 </Validation>",
      "               </Column>",
      "             </Row>",
      "           </Validations>",
      "      </ModalBody>",
      "      <ModalFooter>",
      "          <Button Color=\"Color.Secondary\" Clicked=\"CloseEditModalAsync\">@L[\"Cancel\"]</Button>",
      "          <Button Color=\"Color.Primary\" Type=\"@ButtonType.Submit\" PreventDefaultOnSubmit=\"true\" Clicked=\"UpdateEntityAsync\">@L[\"Save\"]</Button>",
      "      </ModalFooter>",
      "  </ModalContent>",
      "</Modal>$0"
    ],
    "description": "Update modal dialog",
    "prefix": "xUpdateModalDialog"
  },
  "injectHttpClient": {
    "body": "@inject HttpClient$1 ${2|HttpClient,Http|$0",
    "description": "Inserts @inject HttpClient directive",
    "prefix": "xInjectHttpClient"
  },
  "injectIJSRuntime": {
    "body": "@inject IJSRuntime$1 ${2|JSRuntime,Js|}$0",
    "description": "Inserts @inject IJSRuntime directive",
    "prefix": "xInjectIJSRuntime"
  },
  "injectIMapper": {
    "body": "@inject IMapper Mapper$0",
    "description": "Inserts @inject IMapper directive",
    "prefix": "xInjectIMapper"
  },
  "injectMyServiceDirective": {
    "body": "@inject ${1:MyService} ${2:$1}",
    "description": "Inserts @inject MyService MyService",
    "prefix": "xInjectService"
  },
  "injectAppService": {
    "body": "@inject I${2:$1}AppService ${1:Name}AppService",
    "description": "Inserts @inject MyService MyService",
    "prefix": "xInjectAppService"
  },
  "injectNavigationManager": {
    "body": "@inject NavigationManager$1 ${2|NavigationManager,Navigation,Nav|}$0",
    "description": "Inserts @inject NavigationManager directive",
    "prefix": "xInjectNavigationManager"
  },
  "injectProtectedLocalStorage": {
    "body": "@inject ProtectedLocalStorage$1 ${2|LocalStorage,Storage|$0",
    "description": "Inserts @inject ProtectedLocalStorage directive in Blazor Server app",
    "prefix": "xInjectProtectedLocalStorage"
  }

}
