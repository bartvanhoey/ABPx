{
  "addPermissionGroupToContext": {
    "body": [
      "var ${1:name}Group = context.AddGroup(${TM_FILENAME/PermissionDefinitionProvider.cs//}Permissions.${2:${1/^([a-z])/${1:/upcase}/}Group}, L(\"Permission:${1/^([a-z])/${1:/upcase}/}Group\"));",
      "//\"Permission:${1/^([a-z])/${1:/upcase}/}Group\": \"${1/^([a-z])/${1:/upcase}/} management\","
    ],
    "description": "Add group permission to context in PermissionDefinitionProvider",
    "prefix": "xAddPermissionGroupToContext"
  },
  "addPermissionPoliciesAppService": {
    "body": [
      "\tGetPolicyName = ${WORKSPACE_NAME}Permissions$1.${2:ClassName}.Default;",
      "\tGetListPolicyName = ${WORKSPACE_NAME}Permissions.$2.Default;",
      "\tCreatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Create;",
      "\tUpdatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Update;",
      "\tDeletePolicyName = ${WORKSPACE_NAME}Permissions.$2.Delete;"
    ],
    "description": "Adds policy permissions to AppService",
    "prefix": "xAddPermissionsPoliciesAppService"
  },
  "addPermissionToGroup": {
    "body": [
      "var ${1:name}Permission = ${2:groupName}.AddPermission(${3:${TM_FILENAME/PermissionDefinitionProvider.cs//}}Permissions.${4:ClassName}.Default, L(\"Permission:$4\"));",
      "$1Permission.AddChild($3Permissions.$4.Create, L(\"Permission:$4:Create\"));",
      "$1Permission.AddChild($3Permissions.$4.Update, L(\"Permission:$4:Update\"));",
      "$1Permission.AddChild($3Permissions.$4.Delete, L(\"Permission:$4:Delete\"));",
      "",
      "//\"Permission:$4\": \"$4 management\",",
      "//\"Permission:$4:Create\": \"Creating ${5:${4/^([A-Z])/${1:/downcase}/}}\",",
      "//\"Permission:$4:Update\": \"Editing ${5:${4/^([A-Z])/${1:/downcase}/}}\",",
      "//\"Permission:$4:Delete\": \"Deleting ${5:${4/^([A-Z])/${1:/downcase}/}}\"$0"
    ],
    "description": "Adds permission to group in PermissionDefinitionProvider.cs ",
    "prefix": "xAddPermissionToGroup"
  },
  "applicationMenuItemIcon": {
    "body": [
      "var ${1:MenuName}Menu = new ApplicationMenuItem(\"${1/^([a-z])/${1:/upcase}/}\",l[\"Menu:${1/^([a-z])/${1:/upcase}/}\"], icon: \"fa fa-${2:icon-name}\");",
      "// \"Menu:${1/^([a-z])/${1:/upcase}/}\": \"${1/^([a-z])/${1:/upcase}/}\","
    ],
    "description": "New ApplicationMenuItem variable with icon",
    "prefix": "xApplicationMenuItemIcon"
  },
  "applicationMenuItemUrl": {
    "body": [
      "var ${1:MenuName}Menu  = new ApplicationMenuItem(\"${2:ParentMenu}.${1/^([a-z])/${1:/upcase}/}\",l[\"Menu:${1/^([a-z])/${1:/upcase}/}\"], url: \"/${3:${1/(.*)/${1:/downcase}/}}\");",
      "// \"Menu:${1/^([a-z])/${1:/upcase}/}\": \"${1/^([a-z])/${1:/upcase}/}\","
    ],
    "description": "New ApplicationMenuItem variable with url",
    "prefix": "xApplicationMenuItemUrl"
  },
  "appServiceClassStub": {
    "body": [
      "// [Authorize(${WORKSPACE_NAME}Permissions.${TM_FILENAME_BASE/AppService//}s.Default)] ",
      "public class ${TM_FILENAME_BASE} : ${WORKSPACE_NAME}AppService, I${TM_FILENAME_BASE}$1",
      "{",
      "\tpublic ${TM_FILENAME_BASE}($2)",
      "\t{",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Inserts a complete AppService class stub based upon the [YourProjectName]AppService class",
    "prefix": "xAppServiceClassStub"
  },
  "appServiceCreateAsync": {
    "body": [
      "var ${2:created$1} = await _${1:Name}AppService.CreateAsync(${3:input});$0"
    ],
    "description": "Inserts var x = _nameAppService.CreateAsync() statement",
    "prefix": "xAppServiceCreateAsync"
  },
  "taskCompleted": {
    "body": "await Task.CompletedTask;$0",
    "description": "Inserts await Task.CompletedTask statement",
    "prefix": "xTaskCompleted"
  },
  "appServiceDeleteAsync": {
    "body": ["await _${1:Name}AppService.DeleteAsync(${3:id});$0"],
    "description": "Inserts await _nameAppService.DeleteAsync() statement",
    "prefix": "xAppServiceDeleteAsync"
  },
  "appServiceGetAsync": {
    "body": ["${2:var $1} = await _${1:Name}AppService.GetAsync(${3:id});$0"],
    "description": "Inserts var x = _nameAppService.GetAsync() statement",
    "prefix": "xAppServiceGetAsync"
  },
  "appServiceGetListAsync": {
    "body": ["${2:var $1s} = await _${1:Name}AppService.GetListAsync();$0"],
    "description": "Inserts var x = _nameAppService.GetListAsync() statement",
    "prefix": "xAppServiceGetListAsync"
  },
  "asyncExecuterCountAsync": {
    "body": [
      "// using System.Linq;",
      "var ${1|totalCount,count,total|} = await ${2|_asyncExecuter,AsyncExecuter|}.CountAsync$3(${4|query,queryable|});"
    ],
    "description": "Inserts AsyncExecuter.CountAsync statement",
    "prefix": "xAsyncExecuterCountAsync"
  },
  "asyncExecuterFirstOrDefaultAsync": {
    "body": [
      "var ${1:queryResult} = await ${2|_asyncExecuter,AsyncExecuter|}.FirstOrDefaultAsync$3(${4|query,queryable|});"
    ],
    "description": "Inserts AsyncExecuter.FirstOrDefaultAsync statement",
    "prefix": "xAsyncExecuterFirstOrDefaultAsync"
  },
  "asyncExecuterToListAsync": {
    "body": [
      "var ${1|queryResult,list|} = await ${2|_asyncExecuter,AsyncExecuter|}.ToListAsync$3(${4|query,queryable|});"
    ],
    "description": "Inserts AsyncExecuter.ToListAsync statement",
    "prefix": "xAsyncExecuterToListAsync"
  },
  "authAttributeAbp": {
    "body": [
      "[Authorize$1(${WORKSPACE_NAME}Permissions$3.${4:${TM_FILENAME_BASE/AppService//}}s.${5|Default,Create,Update,Delete|})]$0"
    ],
    "description": "Inserts the ABP Authorize attribute for a class or a method",
    "prefix": "xAuthAttributeAbp"
  },
  "authAttributeMicrosoft": {
    "body": ["[Authorize$1]$0"],
    "description": "Inserts the Microsoft.AspNetCore.Authorization Authorize attribute",
    "prefix": "xAuthAttributeMicrosoft"
  },
  "authServiceAuthorizeAsync": {
    "body": [
      "var result = await AuthorizationService.AuthorizeAsync(${WORKSPACE_NAME}Permissions$3.${4:${TM_FILENAME_BASE/AppService//}}s.${5|Default,Create,Update,Delete|});$0"
    ],
    "description": "Inserts the AuthorizationService.AuthorizeAsync method",
    "prefix": "xAuthServiceAuthorizeAsync"
  },
  "authServiceCheckAsync": {
    "body": [
      "await AuthorizationService.CheckAsync(${WORKSPACE_NAME}Permissions$3.${4:${TM_FILENAME_BASE/AppService//}}s.${5|Default,Create,Update,Delete|});$0"
    ],
    "description": "Inserts the AuthorizationService.CheckAsync method",
    "prefix": "xAuthServiceCheckAsync"
  },
  "authServiceIsGrantedAsync": {
    "body": [
      "var isGranted = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions$3.${4:${TM_FILENAME_BASE/AppService//}}s.${5|Default,Create,Update,Delete|});$0"
    ],
    "description": "Inserts the AuthorizationService.IsGrantedAsync method",
    "prefix": "xAuthServiceIsGrantedAsync"
  },
  "modelBuilderEntityMongoDb": {
    "body": ["builder.Entity<${1:ClassName}>(b =>", "{", "});$0"],
    "description": "builder.Entity stub",
    "prefix": "xBuilderEntityMongoDb"
  },
  "builderEntity": {
    "body": [
      "builder.Entity<${1:ClassName}>(b =>",
      "{",
      "\tb.ToTable(${WORKSPACE_NAME}Consts.DbTablePrefix + \"${2:$1}s\", ${WORKSPACE_NAME}Consts.DbSchema);",
      "\tb.ConfigureByConvention$4();",
      "",
      "\t$5//b.Property(x => x.Name).IsRequired().HasMaxLength(${3:$1}Consts$6.MaxNameLength);",
      "\t$7// b.HasIndex(x => x.Name);",
      "});$0"
    ],
    "description": "builder.Entity stub",
    "prefix": "xBuilderEntity"
  },
  "canBeNullAttribute": {
    "body": ["[CanBeNull$1] ${2:string}$3 ${4:name} = null$0"],
    "description": "CanBeNull attribute",
    "prefix": "xCanBeNullAttribute"
  },
  "canCreate": {
    "body": [
      "canCreate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:ClassName}.Create);",
      "protected bool canCreate${3:$1};$0"
    ],
    "description": "Boolean canCreate variable and checks if Create is granted",
    "prefix": "xCanCreate"
  },
  "canCrudMethods": {
    "body": [
      "// using Microsoft.AspNetCore.Authorization;",
      "// using ${WORKSPACE_NAME}.Permissions;",
      "",
      "$0protected bool canCreate$1;",
      "protected bool canUpdate$1;",
      "protected bool canDelete$1;",
      "",
      "canCreate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:$1}.Create);",
      "canUpdate$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$2.Update);",
      "canDelete$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$2.Delete);"
    ],
    "description": "Checks if CRUD methods are granted",
    "prefix": "xCanCrudMethods"
  },
  "canDelete": {
    "body": [
      "canDelete${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:ClassName}.Delete);",
      "protected bool canDelete${3:$1};$0"
    ],
    "description": "Boolean canDelete variable and checks if Delete is granted",
    "prefix": "xCanDelete"
  },
  "canUpdate": {
    "body": [
      "canUpdate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:ClassName}.Update);",
      "protected bool canUpdate${3:$1};$0"
    ],
    "description": "boolean canUpdate variable and checks if Edit/Update is granted",
    "prefix": "xCanUpdate"
  },
  "checkGetListPolicyAsync": {
    "body": ["await CheckGetListPolicyAsync$1();$0"],
    "description": "Inserts await CheckGetListPolicyAsync()",
    "prefix": "xCheckGetListPolicyAsync"
  },
  "checkGetPolicyAsync": {
    "body": ["await CheckGetPolicyAsync$1();$0"],
    "description": "Inserts await CheckGetPolicyAsync()",
    "prefix": "xCheckGetPolicyAsync"
  },
  "checkNotNull": {
    "body": "Check$1.NotNull(${2:value}, nameof(${3:$2}));$0",
    "description": "Check.NotNull statement",
    "prefix": "xCheckNotNull"
  },
  "checkNotNullMaxLength": {
    "body": "Check$1.NotNull(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647});$0",
    "description": "Check.NotNull (+ MaxLength) statement",
    "prefix": "xCheckNotNullMaxLength"
  },
  "checkNotNullMaxMinLength": {
    "body": "Check$1.NotNull(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647}, minLength: ${5:0});$0",
    "description": "Check.NotNull (+ Max/MinLength) statement",
    "prefix": "xCheckNotNullMaxMinLength"
  },
  "checkNotNullOrEmpty": {
    "body": "Check$1.NotNullOrEmpty(${2:value}, nameof(${3:$2}));$0",
    "description": "Check.NotNullOrEmpty statement",
    "prefix": "xCheckNotNullOrEmpty"
  },
  "checkNotNullOrEmptyMaxLength": {
    "body": "Check$1.NotNullOrEmpty(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647});$0",
    "description": "Check.NotNullOrEmpty (+ MaxLength) statement",
    "prefix": "xCheckNotNullOrEmptyMaxLength"
  },
  "checkNotNullOrEmptyMaxMinLength": {
    "body": "Check$1.NotNullOrEmpty(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647}, minLength: ${5:0});$0",
    "description": "Check.NotNullOrEmpty (+ Max/MinLength) statement",
    "prefix": "xCheckNotNullOrEmptyMaxMinLength"
  },
  "checkNotNullOrWhiteSpace": {
    "body": "Check$1.NotNullOrWhiteSpace(${2:value}, nameof(${3:$2}));$0",
    "description": "Check.NotNullOrWhiteSpace statement",
    "prefix": "xCheckNotNullOrWhiteSpace"
  },
  "checkNotNullOrWhiteSpaceMaxLength": {
    "body": "Check$1.NotNullOrWhiteSpace(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647});$0",
    "description": "Check.NotNullOrWhiteSpace (+ MaxLength) statement",
    "prefix": "xCheckNotNullOrWhiteSpaceMaxLength"
  },
  "checkNotNullOrWhiteSpaceMaxMinLength": {
    "body": "Check$1.NotNullOrWhiteSpace(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647}, minLength: ${5:0});$0",
    "description": "Check.NotNullOrWhiteSpace (+ Max/MinLength) statement",
    "prefix": "xCheckNotNullOrWhiteSpaceMaxMinLength"
  },
  "configureOptions": {
    "body": [
      "var configuration = context.Services.GetConfiguration();",
      "Configure<${2:$1}Options>(configuration.GetSection(\"${1:SectionName}\"));$0"
    ],
    "description": "Inserts Configure Options statement for use in ConfigureServices method",
    "prefix": "xConfigureOptions"
  },
  "contextAddTransient": {
    "body": "context.Services.AddTransient<${1:Type}>();;$0",
    "description": "Inserts context.Services.AddTransient statement;",
    "prefix": "xContextAddTransient"
  },
  "contextGetRequiredService": {
    "body": [
      "var ${4:${1/(.*)/${1:/downcase}/}} =  context.ServiceProvider.GetRequiredService<${1:NameService}$2>();$0"
    ],
    "description": "Inserts var service = context.ServiceProvider.GetRequiredService<Type>() statement",
    "prefix": "xContextGetRequiredService"
  },
  "createAsyncIAppServiceMethodDefinition": {
    "body": [
      "\tTask$2<${1:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$3> CreateAsync(Create$1Dto$4 input);",
      "\t$0"
    ],
    "description": "Inserts a CreateAsync definition for an IAppService interface",
    "prefix": "xCreateAsyncIAppServiceMethodDefinition"
  },
  "saveBlobAsyncIAppServiceMethodDefinition": {
    "body": ["\tTask$2 SaveBlobAsync(SaveBlobInput$1Dto$4 input);", "\t$0"],
    "description": "Inserts a SaveBlobAsync definition for an IAppService interface",
    "prefix": "xSaveBlobAsyncIAppServiceMethodDefinition"
  },
  "createManyAsyncIAppServiceMethodDefinition": {
    "body": [
      "\tTask$2<ListResultDto$4<${1:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$3>> CreateManyAsync(Create$1Dto$5 input);",
      "\t$0"
    ],
    "description": "Inserts a CreateManyAsync definition for an IAppService interface",
    "prefix": "xCreateManyAsyncIAppServiceMethodDefinition"
  },
  "createMapCreateDtoToType": {
    "body": "CreateMap<Create${1:SourceType}Dto, $1>();$0",
    "description": "CreateMap from Create[Type]Dto to [Type] statement",
    "prefix": "xCreateMapCreateDtoToType"
  },
  "createMapCreateUpdateDtoToType": {
    "body": "CreateMap<CreateUpdate${1:SourceType}Dto, $1>();$0",
    "description": "CreateMap from CreateUpdate[Type]Dto to [Type] statement",
    "prefix": "xCreateMapCreateUpdateDtoToType"
  },
  "createMapDtoToCreateDto": {
    "body": "CreateMap<${1:SourceType}Dto, Create$1Dto>();$0",
    "description": "CreateMap from [Type]Dto to Create[Type]Dto statement",
    "prefix": "xCreateMapDtoToCreateDto"
  },
  "createMapDtoToCreateUpdateDto": {
    "body": "CreateMap<${1:SourceType}Dto, CreateUpdate$1Dto>();$0",
    "description": "CreateMap from [Type]Dto to CreateUpdate[Type]Dto statement",
    "prefix": "xCreateMapDtoToCreateUpdateDto"
  },
  "createMapDtoToType": {
    "body": "CreateMap<${1:SourceType}Dto,${2:DestinationType}>();$0",
    "description": "CreateMap from [Type]Dto to [Type] statement",
    "prefix": "xCreateMapDtoToType"
  },
  "createMapDtoToUpdateDto": {
    "body": "CreateMap<${1:SourceType}Dto, Update$1Dto>();$0",
    "description": "CreateMap from [Type]Dto to Update[Type]Dto statement",
    "prefix": "xCreateMapDtoToUpdateDto"
  },
  "createMapTo": {
    "body": "CreateMap<${1:SourceType}$2,${3:DestinationType}$4>();$0",
    "description": "CreateMap from SourceType to DestinationType statement",
    "prefix": "xCreateMapTo"
  },
  "createMapTypeToCreateDto": {
    "body": "CreateMap<${1:SourceType}, Create$1Dto>();$0",
    "description": "CreateMap from [Type] to CreateDto statement",
    "prefix": "xCreateMapTypeToCreateDto"
  },
  "createMapTypeToCreateUpdateDto": {
    "body": "CreateMap<${1:SourceType}, CreateUpdate$1Dto>();$0",
    "description": "CreateMap from [Type] to CreateUpdateDto statement",
    "prefix": "xCreateMapTypeToCreateUpdateDto"
  },
  "createMapTypeToDto": {
    "body": "CreateMap<${1:SourceType}, ${2:$1}Dto>();$0",
    "description": "CreateMap from [Type] to Dto statement",
    "prefix": "xCreateMapTypeToDto"
  },
  "createMapTypeToLookupDto": {
    "body": "CreateMap<${1:SourceType}, $1LookupDto>();$0",
    "description": "CreateMap from [Type] to LookupDto statement",
    "prefix": "xCreateMapTypeToLookupDto"
  },
  "createMapTypeToUpdateDto": {
    "body": "CreateMap<${1:SourceType}, Update$1Dto>();$0",
    "description": "CreateMap from [Type] to UpdateDto statement",
    "prefix": "xCreateMapTypeToUpdateDto"
  },
  "createMapUpdateDtoToType": {
    "body": "CreateMap<Update${1:SourceType}Dto, $1>();$0",
    "description": "CreateMap from UpdateDto to [Type] statement",
    "prefix": "xCreateMapUpdateDtoToType"
  },
  "crudAppServiceCreateDtoUpdateDto": {
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} : CrudAppService<${2:Type}, ${3:$2}Dto, ${4|Guid,int,string|}$5, PagedAndSortedResultRequestDto$6, Create$2Dto, Update$2Dto>, I$2AppService",
      "{",
      "\tpublic ${7:$1}(IRepository<$2, ${8:$4}> repository): base(repository)",
      "\t{",
      "\t\t// GetPolicyName = ${WORKSPACE_NAME}Permissions.$2s.Default;",
      "\t\t// GetListPolicyName = ${WORKSPACE_NAME}Permissions.$2s.Default;",
      "\t\t// CreatePolicyName = ${WORKSPACE_NAME}Permissions.$2s.Create;",
      "\t\t// UpdatePolicyName = ${WORKSPACE_NAME}Permissions.$2s.Update;",
      "\t\t// DeletePolicyName = ${WORKSPACE_NAME}Permissions.$2s.Delete;",
      "\t}",
      "}$0"
    ],
    "description": "Inserts a complete CrudAppService class with CreateDto and UpdateDto separated",
    "prefix": "xCrudAppServiceCreateDtoAndUpdateDto"
  },
  "crudAppServiceCreateUpdateDto": {
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} : CrudAppService<${2:Type}, ${3:$2}Dto, ${4|Guid,int,string|}$5, PagedAndSortedResultRequestDto$6, CreateUpdate$2Dto>, I$2AppService",
      "{",
      "\tpublic ${7:$1}(IRepository<$2, ${8:$4}> repository): base(repository)",
      "\t{",
      "\t\t// GetPolicyName = ${WORKSPACE_NAME}Permissions.$2s.Default;",
      "\t\t// GetListPolicyName = ${WORKSPACE_NAME}Permissions.$2s.Default;",
      "\t\t// CreatePolicyName = ${WORKSPACE_NAME}Permissions.$2s.Create;",
      "\t\t// UpdatePolicyName = ${WORKSPACE_NAME}Permissions.$2s.Update;",
      "\t\t// DeletePolicyName = ${WORKSPACE_NAME}Permissions.$2s.Delete;",
      "\t}",
      "}$0"
    ],
    "description": "Inserts a complete CrudAppService class with CreateUpdateDto combined",
    "prefix": "xCrudAppServiceCreateUpdateDto"
  },
  "ctor": {
    "body": [
      "${1|private,internal,protected,public|} ${TM_FILENAME_BASE/.razor//}($2)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "constructor stub",
    "prefix": "xCtor"
  },
  "ctorBusinessException": {
    "body": [
      "public ${TM_FILENAME_BASE}(${1:string} ${2:name})",
      "\t: base(${3:${WORKSPACE_NAME}}DomainErrorCodes.${4:${TM_FILENAME_BASE/Exception//}})",
      "{",
      "\tWithData$5(\"${6:$2}\", ${7:$2});",
      "}"
    ],
    "description": "constructor stub in a class derived from BusinessException",
    "prefix": "xCtorBusinessException"
  },
  "ctorPrivate": {
    "body": ["private ${TM_FILENAME_BASE/.razor//}($1)", "{", "\t$0", "}"],
    "description": "Insert a private constructor stub",
    "prefix": "xCtorPrivate"
  },
  "ctorPublic": {
    "body": ["public ${TM_FILENAME_BASE/.razor//}($1)", "{", "\t$0", "}"],
    "description": "Insert a public constructor stub",
    "prefix": "xCtorPublic"
  },
  "currentTenantChange": {
    "body": [
      "using (CurrentTenant.Change(${1|CurrentTenant.Id,tenantId,input.TenantId|}))",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts using (CurrentTenant.Change(tenantId))",
    "prefix": "xCurrentTenantChange"
  },
  "currentUserGetId": {
    "body": ["CurrentUser.GetId()"],
    "description": "Inserts CurrentUser.GetId() statement",
    "prefix": "xCurrentUserGetId"
  },
  "ifCurrentUserIsAuthenticated": {
    "body": ["if (CurrentUser.isAuthenticated)", "{", "\t$0", "}"],
    "description": "If CurrentUser.isAuthenticated",
    "prefix": "xIfCurrentUserIsAuthenticated"
  },
  "customBusinessExceptionClass": {
    "body": [
      "public class ${TM_FILENAME_BASE}  : BusinessException$1",
      "{",
      "\tpublic ${TM_FILENAME_BASE}(${2:string} ${3:name})",
      "\t\t: base(${WORKSPACE_NAME}DomainErrorCodes.${4:${TM_FILENAME_BASE/Exception//}})",
      "\t{",
      "\t\tWithData$5(\"${6:$3}\", ${7:$3});",
      "\t}",
      "}"
    ],
    "description": "Inserts a complete CustomException class inherits from class BusinessException",
    "prefix": "xCustomBusinessExceptionClass"
  },
  "dataTypeAttribute": {
    "body": "[DataType$1(DataType.${2|CreditCard,Currency,Custom,Date,DateTime,Duration,EmailAddress,Html,ImageUrl,MultilineText,PhoneNumber|})]",
    "description": "DataType attribute",
    "prefix": "xDataTypeAttribute"
  },
  "dbSet": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s { get; set; }$0",
    "description": "Inserts a DbSet for a class statement in DbContext",
    "prefix": "xDbSet"
  },
  "dbSetNewSyntax": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s => Set<${4:$1}>();$0",
    "description": "Inserts a DbSet for a class statement in DbContext",
    "prefix": "xDbSetNewSyntax"
  },
  "deleteAsyncIAppServiceMethodDefinition": {
    "body": ["\tTask$4 DeleteAsync(${1|Guid,int,string|}$2 ${3:id});", "\t$0"],
    "description": "Inserts a DeleteAsync definition for an IAppService interface",
    "prefix": "xDeleteAsyncIAppServiceMethodDefinition"
  },
  "dependencyAttribute": {
    "body": ["[Dependency$1(ReplaceServices = ${2|true,false|})]"],
    "description": "Inserts Dependency attribute",
    "prefix": "xDependencyAttribute"
  },
  "efCoreRepositoryClassStub": {
    "body": [
      "public class ${1:ClassName}Repository : EfCoreRepository$2<${3:${WORKSPACE_NAME}}DbContext, ${4:$1}$5, ${6|Guid,int,string|}$7>, I${8:$1}Repository$11",
      "{",
      "public $1Repository(IDbContextProvider$9<${10:$3}DbContext> dbContextProvider) : base(dbContextProvider)",
      "{",
      "}",
      "$0",
      "",
      "}"
    ],
    "description": "Inserts an EfCoreRepositoryClass stub",
    "prefix": "xEfCoreRepositoryClassStub"
  },
  "emailAddressAttribute": {
    "body": ["[EmailAddress$1] $0"],
    "description": "EmailAddress Attribute",
    "prefix": "xEmailAddressAttribute"
  },
  "executeSqlRawAsync": {
    "body": [
      "await dbContext.Database.ExecuteSqlRawAsync(\"${1:YourSqlQueryHere}\");$0"
    ],
    "description": "Inserts await dbContext.Database.ExecuteSqlRawAsync statement",
    "prefix": "xExecuteSqlRawAsync"
  },
  "exposeServicesAttribute": {
    "body": ["[ExposeServices$1(typeof(${2:TypeName}))]"],
    "description": "Inserts an ExposeServices attribute",
    "prefix": "xExposeServicesAttribute"
  },
  "filterProperty": {
    "body": ["public string Filter { get; set; }"],
    "description": "Inserts a Filter property",
    "prefix": "xFilterProperty"
  },
  "findByNameAsyncMethodStub": {
    "body": "public Task$2<${1:Type}> FindByNameAsync(string name);$0",
    "description": "Adds a FindByNameAsync method stub",
    "prefix": "xFindByNameAsyncMethodStub"
  },
  "findByNameAsyncIAppServiceMethodDefinition": {
    "body": "public Task$2<${1:Type}> FindByNameAsync(string name);$0",
    "description": "Adds a FindByNameAsync definition for an IAppService interface",
    "prefix": "xFindByNameAsyncIAppServiceMethodDefinition"
  },
  "getAsyncIAppServiceMethodDefinition": {
    "body": [
      "\tTask$2<${1:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$3> GetAsync(${4|Guid,int,string|}$5 ${6:id});",
      "\t$0"
    ],
    "description": "Inserts a GetAsync definition for an IAppService interface",
    "prefix": "xGetAsyncIAppServiceMethodDefinition"
  },
  "getBlobAsyncIAppServiceMethodDefinition": {
    "body": [
      "\tTask$2<BlobDto$3> GetBlobAsync(${4:GetBlobRequestDto}$5 ${6:input});",
      "\t$0"
    ],
    "description": "Inserts a GetBlobAsync definition for an IAppService interface",
    "prefix": "xGetBlobAsyncIAppServiceMethodDefinition"
  },
  "getAsyncMethodStub": {
    "body": "public Task$2<${1:Type}> GetAsync(${3|Guid,int,string|} id$4);$0",
    "description": "Adds a GetAsync method stub",
    "prefix": "xGetAsyncMethodStub"
  },
  "getAllBytesAsyncMethodBlobContainer": {
    "body": "var blob = await ${1:_fileContainer}.GetAllBytesAsync(${3:input.Name});$0",
    "description": "Inserts var blob = _fileContainer.GetAllBytesAsync method",
    "prefix": "xGetAllBytesAsyncMethodBlobContainer"
  },
  "getBlobAsyncMethodAppService": {
    "body": "var fileDto = await ${1:_fileAppService}$2.GetBlobAsync(new GetBlobRequestDto {Name = ${3:fileName} });$0",
    "description": "Inserts var blob = _fileContainer.GetBlobAsync method",
    "prefix": "xBlobAsyncMethodAppService"
  },
  "saveAsyncMethodBlobContainer": {
    "body": "await ${1:_fileContainer}.SaveAsync(${2:input.Name}, ${3:input.Content}, true);$0",
    "description": "Inserts await _fileContainer.SaveAsync method",
    "prefix": "xSaveAsyncMethodBlobContainer"
  },
  "saveAsyncMethodAppService": {
    "body": "await ${1:_fileAppService}.SaveBlobAsync(new SaveBlobInputDto$2 {Name = ${3:fileName}, Content} = ${4:memoryStream.ToArray()});$0",
    "description": "Inserts await _fileAppService.SaveBlobAsync method",
    "prefix": "xSaveAsyncMethodAppService"
  },
  "getConfigurationFromContext": {
    "body": ["var configuration = context.Services.GetConfiguration();$0"],
    "description": "Inserts var configuration = context.Services.GetConfiguration(); statement",
    "prefix": "xGetConfigurationFromContext"
  },
  "builderConfigureBlobStoring": {
    "body": "builder.ConfigureBlobStoring();$0",
    "description": "Inserts builder.ConfigureBlobStoring() statement in OnModelCreating method in DbContext",
    "prefix": "xBuilderConfigureBlobStoring"
  },
  "getDbContextAsync": {
    "body": "var dbContext = await GetDbContextAsync();$0",
    "description": "Inserts var dbContext = await GetDbContextAsync();",
    "prefix": "xGetDbContextAsync"
  },
  "getDbSetGetAsync": {
    "body": "var dbSet = await GetDbSetAsync();$0",
    "description": "Inserts var dbSet = await GetDbSetAsync();",
    "prefix": "xGetDbSetAsync"
  },
  "getKeysMethod": {
    "body": [
      "public override object[] GetKeys()",
      "{",
      "\treturn new object[] {${1:PropertyName}, ${2:PropertyName}};$0",
      "}"
    ],
    "description": "Insert a GetKeys method",
    "prefix": "xGetKeysMethod"
  },
  "getListAsyncIAppServiceMethodDefinition": {
    "body": [
      "\tTask$2<List<${1:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$3>> GetListAsync(Get${1:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}ListDto$4 input);$0"
    ],
    "description": "Inserts a GetListAsync definition for an IAppService interface",
    "prefix": "xGetListAsyncIAppServiceMethodDefinition"
  },
  "getListAsyncMethodStub": {
    "body": "public Task$3<List$2<${1:Type}>> GetListAsync(int skipCount, int maxResultCount, string sorting, string filter = null);$0",
    "description": "Adds a GetListAsync method stub",
    "prefix": "xGetListAsyncMethodStub"
  },
  "getLookupIAppServiceMethodDefinition": {
    "body": "Task$2<ListResultDto<${1:Type}LookupDto>> Get$1LookupAsync();$0",
    "description": "Adds a GetLookupAsync method to an IAppService interface",
    "prefix": "xGetLookupIAppServiceMethodDefinition"
  },
  "getLookupMethodImplementationAppService": {
    "body": [
      "public async Task$5<ListResultDto<$1LookupDto>> Get$1LookupAsync()",
      "{",
      "\tvar ${2:${1/(.*)/${1:/downcase}/}}s = await _${2:${1/(.*)/${1:/downcase}/}}Repository.GetListAsync();",
      "",
      "\treturn new ListResultDto<$1LookupDto>(ObjectMapper.Map<List$6<${1:Type}>, List<$1LookupDto>>(${2:${1/(.*)/${1:/downcase}/}}s));",
      "}"
    ],
    "description": "Adds a GetLookupAsync method to an AppService class",
    "prefix": "xGetLookupMethodImplementationAppService"
  },
  "getPagedListAsyncIAppServiceMethodDefinition": {
    "body": "Task$3<PagedResultDto$2<${1:Type}Dto>> GetPagedListAsync(PagedAndSortedResultRequestDto$3 input);$0",
    "description": "Adds a paged GetPagedListAsync definition in IAppService",
    "prefix": "xGetPagedListAsyncIAppServiceMethodDefinition"
  },
  "getPagedListAsyncIRepoMethodDefinitionGetTypeDtoInput": {
    "body": "Task$3<PagedResultDto$2<${1:Type}Dto>> GetPagedListAsync(Get$1PagedListDto input);$0",
    "description": "Adds a paged GetPagedListAsync definition in IRepo",
    "prefix": "xGetPagedListAsyncIRepoMethodDefinitionGetTypePageListDtoInput"
  },
  "getListAsyncIRepoMethodDefinition": {
    "body": "\tTask$2<List<${1:${TM_FILENAME_BASE/([\\I])(.*)(Repository)/$2/gi}}$3>> GetListAsync($4);$0",
    "description": "Inserts a GetListAsync definition for in an IRepo interface",
    "prefix": "xGetListAsyncIRepoMethodDefinition"
  },
  "getPagedListAsyncIRepoMethodDefinitionWithParameters": {
    "body": "\tTask$2<List<${1:${TM_FILENAME_BASE/([\\I])(.*)(Repository)/$2/gi}}$3>> GetPagedListAsync($3int skipCount, int maxResultCount,string sorting = null, string filter = null);$0",
    "description": "Adds a GetPagedListAsync definition with parameters in IRepo",
    "prefix": "xGetPagedListAsyncIRepoMethodDefinitionWithParameters"
  },
  "getPrivateSet": {
    "body": ["{ get; private set; }$0"],
    "description": "Inserts { get, private set }",
    "prefix": "xGps"
  },
  "GetQueryableExtensionsClassStub": {
    "body": [
      "public static class ${1:Type}GetQueryableExtensions",
      "{",
      "\tpublic static IQueryable<$1> IncludeDetails(this IQueryable<$1> queryable, bool include = true)",
      "\t{",
      "\t\tif (!include) return queryable;",
      "\t\treturn queryable.Include(x => x.${2:PropertyName});",
      "\t}",
      "}"
    ],
    "description": "Inserts GetQueryableExtensionsClass stub",
    "prefix": "xGetQueryableExtensionsClassStub"
  },
  "getRequiredIAppService": {
    "body": [
      "_${4:${1/(.*)/${1:/downcase}/}}AppService = GetRequiredService<I${1:Name}AppService$2>();$0",
      "private readonly I${3:$1}AppService _${5:$4}AppService$6;"
    ],
    "description": "Inserts GetRequiredService<IAppService> and IAppService field",
    "prefix": "xGetRequiredIAppService"
  },
  "getRequiredService": {
    "body": [
      "_${4:${1/(.*)/${1:/downcase}/}} = GetRequiredService<${1:NameService}$2>();$0",
      "private readonly ${3:$1} _${5:$4}$6;"
    ],
    "description": "Inserts GetRequiredService and matching field!",
    "prefix": "xGetRequiredService"
  },
  "getIStringLocalizerService": {
    "body": [
      "var localizer = ${1|validationContext,context|}.GetRequiredService$2<IStringLocalizer$3<${WORKSPACE_NAME}Resource$4>>();$0"
    ],
    "description": "Inserts var localizer = context.GetRequiredService<IStringLocalizer",
    "prefix": "xGetIStringLocalizerService"
  },
  "getSet": {
    "body": ["{ get; set; }$0"],
    "description": "Inserts { get, set }",
    "prefix": "xGs"
  },
  "guidGeneratorCreate": {
    "body": "${1|GuidGenerator,_guidGenerator,guidGenerator|}.Create()$0",
    "description": "Inserts GuidGenerator.Create() statement",
    "prefix": "xGuidGeneratorCreate"
  },
  "hasIndex": {
    "body": ["b.HasIndex(x => x.${1:PropertyName});$0"],
    "description": "Inserts hasIndex statement",
    "prefix": "xHasIndex"
  },
  "hasIndexCompositeKey": {
    "body": ["b.HasIndex(x => new {x.${1:Type}, x.${2:Type}});$0"],
    "description": "Inserts hasIndex statement (composite key)",
    "prefix": "xHasIndexCompositeKey"
  },
  "hasIndexUnique": {
    "body": ["b.HasIndex(x => x.${1:PropertyName}).IsUnique();$0"],
    "description": "Inserts hasIndex with Unique statement",
    "prefix": "xHasIndexUnique"
  },
  "hasKey": {
    "body": ["b.HasKey(x => new {x.${1:Type}, x.${2:Type}});$0"],
    "description": "Inserts hasKey statement (composite key)",
    "prefix": "xHasKey"
  },
  "hasManyWithOneHasFkDeleteRestrictIsRequired": {
    "body": [
      "b.HasOne(x => x.${1:Type}).WithMany().HasForeignKey(x => x.$1Id).OnDelete(DeleteBehavior.Restrict).IsRequired();$0"
    ],
    "description": "Inserts HasOne(x => x.Type).WithMany().ForeignKey().OnDelete(DeleteBehavior.Restrict).IsRequired statement",
    "prefix": "xHasManyWithOneHasFkDeleteRestrictIsRequired"
  },
  "hasOneWithManyFkIsRequired": {
    "body": [
      "b.HasOne<${1:Type}>().WithMany(x => x.${2:Type}).HasForeignKey(x => x.$1Id).IsRequired();$0"
    ],
    "description": "Inserts HasOne<Type>().WithMany().ForeignKey().IsRequired statement",
    "prefix": "xHasOneWithManyFkIsRequired"
  },

  "iAppServiceParam": {
    "body": "I${1:Name}AppService$2 ${3:${1/(.*)/${1:/downcase}/}}AppService$0",
    "description": "Inserts a IAppService parameter",
    "prefix": "xIAppServiceParam"
  },
  "iAppServiceStubCrudMethods": {
    "body": [
      "public interface ${TM_FILENAME_BASE} : IApplicationService$1",
      "{",
      "\tTask$3<${2:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$7> GetAsync(${4|Guid,int,string|}$5 id);",
      "",
      "\tTask<PagedResultDto<$2Dto>$6> GetListAsync(Get$2ListDto$8 input);",
      "",
      "\tTask<$2Dto> CreateAsync(Create$2Dto$9 input);",
      "",
      "\tTask UpdateAsync($4 id, Update$2Dto$10 input);",
      "",
      "\tTask DeleteAsync($4 id);",
      "",
      "}$0"
    ],
    "description": "Inserts a complete IAppService interface with CRUD methods for a given Type",
    "prefix": "xIAppServiceStubCrudMethods"
  },
  "iAppServiceUpdateAsyncDefinition": {
    "body": [
      "\tTask$6 UpdateAsync(${3|Guid,int,string|}$4 ${5:id}, Update${1:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$2 input);",
      "\t$0"
    ],
    "description": "Inserts a UpdateAsync definition for an IAppService interface",
    "prefix": "xIAppServiceUpdateAsyncDefinition"
  },
  "iAppUserRepositoryCtorParam": {
    "body": "IAppUserRepository$1 appUserRepository$0",
    "description": "Inserts an IAppUserRepository appUserRepository parameter in the constructor",
    "prefix": "xIAppUserRepositoryCtorParam"
  },
  "iAsyncQueryableExecuterCtorParam": {
    "body": "IAsyncQueryableExecuter$1 asyncExecuter$0",
    "description": "Inserts an IAsyncQueryableExecuter asyncExecuter parameter in the constructor",
    "prefix": "xIAsyncQueryableExecuterCtorParam"
  },
  "iBlobContainerCtorParam": {
    "body": "IBlobContainer<${1:Name}>$2 ${1/^([A-Z])(.*)/${1:/downcase}$2/}$0",
    "description": "Inserts a IBlobContainer parameter in constructor",
    "prefix": "xIBlobContainerCtorParam"
  },
  "iConfigurationCtorParam": {
    "body": "IConfiguration$1 configuration$0",
    "description": "Inserts an IConfiguration configuration parameter in the constructor",
    "prefix": "xIConfigurationCtorParam"
  },
  "iCrudAppServiceCreateDtoUpdateDto": {
    "body": [
      "public interface ${TM_FILENAME_BASE} : ICrudAppService<${1:Type}Dto, ${2|Guid,int,string|}$3, PagedAndSortedResultRequestDto$4, Create$1Dto, Update$1Dto>, IApplicationService$0",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a complete ICrudAppService CreateDto - UpdateDto",
    "prefix": "xICrudAppServiceCreateDtoAndUpdateDto"
  },
  "iCrudAppServiceCreateUpdateDto": {
    "body": [
      "public interface ${TM_FILENAME_BASE} : ICrudAppService<${1:Type}Dto, ${2|Guid,int,string|}$3, PagedAndSortedResultRequestDto$4, CreateUpdate$1Dto>, IApplicationService$0",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a complete ICrudAppService - CreateUpdateDto",
    "prefix": "xICrudAppServiceCreateUpdateDto"
  },
  "iCrudMethodsAppService": {
    "body": [
      "Task$2<${1:ClassName}Dto$6> GetAsync(${3|Guid,int,string|}$4 id);",
      "",
      "Task<PagedResultDto<$1Dto>$5> GetListAsync(Get$1ListDto$7 input);",
      "",
      "Task<$1Dto> CreateAsync(Create$1Dto$8 input);",
      "",
      "Task UpdateAsync($3 id, Update$1Dto$9 input);",
      "",
      "Task DeleteAsync($3 id);$0"
    ],
    "description": "Inserts the basic CRUD methods in an IAppService",
    "prefix": "xCrudMethodsIAppService"
  },
  "iCurrentTenantCtorParam": {
    "body": "ICurrentTenant$1 currentTenant$0",
    "description": "Inserts an ICurrentTenant currentTenant parameter in the constructor",
    "prefix": "xICurrentTenantCtorParam"
  },
  "iCurrentUserCtorParam": {
    "body": "ICurrentUser$1 currentUser$0",
    "description": "Inserts an ICurrentUser currentUser parameter in the constructor",
    "prefix": "xICurrentUserCtorParam"
  },
  "iDataFilterISoftDeleteParam": {
    "body": "IDataFilter<ISoftDelete> ${1|_dataFilter,_softDeleteFilter|}",
    "description": "Inserts a IDataFilterISoftDelete parameter",
    "prefix": "xIDataFilterISoftDeleteParam"
  },
  "iDataFilterProperty": {
    "body": "public IDataFilter DataFilter { get; set; }",
    "description": "Inserts property public IDataFilter DataFilter { get; set; }",
    "prefix": "xIDataFilterProperty"
  },
  "IdentityUserManager": {
    "body": "IdentityUserManager$1 ${2:identityUserManager}$0",
    "description": "Inserts an IdentityUserManager identityManager parameter in the constructor",
    "prefix": "xIdentityUserManagerCtorParam"
  },
  "AbpSignInManager": {
    "body": "AbpSignInManager$1 ${2:abpSignInManager}$0",
    "description": "Inserts an AbpSignInManager abpSignInManager parameter in the constructor",
    "prefix": "xAbpSignInManagerCtorParam"
  },
  "IIdentityUserRepository": {
    "body": "IIdentityUserRepository$1 identityUserRepository$1$0",
    "description": "Inserts an IIdentityUserRepository identityUserRepository parameter in the constructor",
    "prefix": "xIIdentityUserRepositoryCtorParam"
  },
  "ifAuthServiceIsGrantedAsync": {
    "body": [
      "if(await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions$3.${4:${TM_FILENAME_BASE/AppService//}}s.${5|Default,Create,Update,Delete|}))",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts the AuthorizationService.IsGrantedAsync method",
    "prefix": "xIfAuthServiceIsGrantedAsync"
  },
  "ifInlineStatement": {
    "body": ["if (${1:MyCondition}) $2", "$0"],
    "description": "Inline if statement",
    "prefix": "xIfInline"
  },
  "ifInputSortingIsNullOrWhiteSpace": {
    "body": [
      " if (input.Sorting.IsNullOrWhiteSpace())",
      "{",
      "\tinput.Sorting = nameof(${1:Type}.${2:Property});",
      "}$0"
    ],
    "description": "Inserts if input.Sorting.IsNullOrWhiteSpace statement",
    "prefix": "xIfInputSortingIsNullOrWhiteSpace"
  },
  "ifIsGrantedAsyncPermission": {
    "body": [
      "// using ${WORKSPACE_NAME}.Permissions;",
      "// \"Menu:$3\": \"$3\", ",
      "if (await context.IsGrantedAsync(${WORKSPACE_NAME}Permissions$2.${3:ClassName}.Default))",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts if (await IsGrantedAsync(permission)){ }statement",
    "prefix": "xIfIsGrantedAsyncPermission"
  },
  "ifNotNullInlineStatement": {
    "body": ["if (${1:MyVariable} != null) $2", "$0"],
    "description": "Inline if not null statement",
    "prefix": "xIfNotNullInline"
  },
  "ifNotNullStatement": {
    "body": ["if (${1:MyVariable} != null)", "{", "\t$2", "}", "$0"],
    "description": "If not null statement",
    "prefix": "xIfNotNull"
  },
  "ifNullInlineStatement": {
    "body": ["if (${1:MyVariable} == null) $2", "$0"],
    "description": "Inline if not null statement",
    "prefix": "xIfNullInline"
  },
  "ifNullStatement": {
    "body": ["if (${1:MyVariable} == null)", "{", "\t$2", "}", "$0"],
    "description": "If null statement",
    "prefix": "xIfNull"
  },
  "ifNotStatement": {
    "body": ["if(!$1)", "{", "\t$2", "}", "$0"],
    "description": "If not statement",
    "prefix": "xIfNot"
  },
  "ifRepositoryGetCountAsync": {
    "body": [
      "if (await _${1:name}Repository.GetCountAsync$2() ${3|<,<=,==,!=,>=,>|} 0)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts if(await _repository.GetCountAsync() ? 0) statement",
    "prefix": "xIfRepoGetCountAsync"
  },
  "ifResultSucceededStatement": {
    "body": ["if (result.Succeeded)", "\t{", "\t$0", "\t}"],
    "description": "If result.Succeeded statement",
    "prefix": "xIfResultSucceeded"
  },
  "ifStatement": {
    "body": ["if (${1:MyCondition})", "{", "\t$2", "}", "$0"],
    "description": "If statement",
    "prefix": "xIf"
  },
  "iGuidGeneratorParam": {
    "body": "IGuidGenerator$1 guidGenerator$0",
    "description": "Inserts a IGuidGenerator parameter",
    "prefix": "xIGuidGeneratorParam"
  },
  "iMongoCollection": {
    "body": "public IMongoCollection<${1:ClassName}$2> ${3:$1}s => Collection<$1>();$0",
    "description": "Inserts as IMongoCollection for a class statement in DbContext",
    "prefix": "xIMongoCollection"
  },
  "implementAbpClaimsPrincipalContributor": {
    "body": " IAbpClaimsPrincipalContributor$0",
    "description": "Implements IAbpClaimsPrincipalContributor interface",
    "prefix": "xImpIAbpClaimsPrincipalContributor"
  },
  "implementCorrespondingAppService": {
    "body": "ApplicationService$1, I${TM_FILENAME_BASE}$0",
    "description": "Implements corresponding IAppService interface",
    "prefix": "xImpCorrespondingIAppService"
  },
  "implementIApplicationService": {
    "body": " IApplicationService$0",
    "description": "Implements IApplicationService interface",
    "prefix": "xImpIApplicationService"
  },
  "implementICorrespondingRepository": {
    "body": "I${TM_FILENAME_BASE}$0",
    "description": "Implements corresponding IRepository interface",
    "prefix": "xImpCorrespondingIRepository"
  },
  "implementIDataSeedContributor": {
    "body": " IDataSeedContributor$2, ITransientDependency$1$0",
    "description": "Implements IDataSeedContributor (+ ITransientDependency) interface",
    "prefix": "xImpIDataSeedContributor"
  },
  "implementIHasCreationTime": {
    "body": " IInjectServiceProvider$0",
    "description": "Implements IInjectServiceProvider interface",
    "prefix": "xImpIInjectServiceProvider"
  },
  "implementIInjectServiceProvider": {
    "body": " IHasCreationTime$0",
    "description": "Implements IHasCreationTime interface",
    "prefix": "xImpIHasCreationTime"
  },
  "implementIMultiTenant": {
    "body": " IMultiTenant$0",
    "description": "Implements IMultiTenant interface",
    "prefix": "xImpIMultiTenant"
  },
  "implementIRepository": {
    "body": " IRepository$1<${2:Type}, ${3|Guid,int,string|}>$0",
    "description": "Implements IRepository interface",
    "prefix": "xImpIRepository"
  },
  "implementISingletonDependency": {
    "body": " ISingletonDependency$1",
    "description": "Implements ISingletonDependency interface",
    "prefix": "xImpISingletonDependency"
  },
  "implementIScopedDependency": {
    "body": " IScopedDependency$1",
    "description": "Implements IScopedDependency interface",
    "prefix": "xImpIScopedDependency"
  },
  "implementITransientDependency": {
    "body": " ITransientDependency$1",
    "description": "Implements ITransientDependency interface",
    "prefix": "xImpITransientDependency"
  },
  "implementIValidatableObject": {
    "body": " IValidatableObject$0",
    "description": "Implements IValidatableObject interface",
    "prefix": "xImpIValidatableObject"
  },
  "inhAbpModule": {
    "body": " AbpModule$1",
    "description": "Inherits AbpModule",
    "prefix": "xInhAbpModule"
  },
  "inhBusinessException": {
    "body": " BusinessException$1",
    "description": "Inherits BusinessException class",
    "prefix": "xInhBusinessException"
  },
  "inheritsAggregateRoot": {
    "body": " AggregateRoot<${1|Guid,int,string|}>$0",
    "description": "Inherits AggregateRoot class",
    "prefix": "xInhAggregateRoot"
  },
  "inheritsApplicationService": {
    "body": [" ApplicationService$0"],
    "description": "Inherits ApplicationService class",
    "prefix": "xInhApplicationService"
  },
  "inheritsApplicationTestBase": {
    "body": " ${WORKSPACE_NAME}ApplicationTestBase$0",
    "description": "Inherits ApplicationTestBase class",
    "prefix": "xInhApplicationTestBase"
  },
  "inheritsAuditedAggregateRoot": {
    "body": " AuditedAggregateRoot$1<${2|Guid,int,string|}>$0",
    "description": "Inherits AuditedAggregateRoot class",
    "prefix": "xInhAuditedAggregateRoot"
  },
  "inheritsAuditedEntity": {
    "body": " AuditedEntity$1<${2|Guid,int,string|}>$0",
    "description": "Inherits AuditedEntity class",
    "prefix": "xInhAuditedEntity"
  },
  "inheritsAuditedEntityDto": {
    "body": " AuditedEntityDto<${1|Guid,int,string|}>$0",
    "description": "Inherits AuditedEntityDto class",
    "prefix": "xInhAuditedEntityDto"
  },
  "inheritsBasicAggregateRoot": {
    "body": " BasicAggregateRoot<${1|Guid,int,string|}>$0",
    "description": "Inherits BasicAggregateRoot class",
    "prefix": "xInhBasicAggregateRoot"
  },
  "inheritsCreationAuditedAggregateRoot": {
    "body": " CreationAuditedAggregateRoot$1<${2|Guid,int,string|}>$0",
    "description": "Inherits CreationAuditedAggregateRoot class",
    "prefix": "xInhCreationAuditedAggregateRoot"
  },
  "inheritsCreationAuditedEntity": {
    "body": " CreationAuditedEntity$1<${2|Guid,int,string|}>$0",
    "description": "Inherits CreationAuditedEntity class",
    "prefix": "xInhCreationAuditedEntity"
  },
  "inheritsCreationAuditedEntityDto": {
    "body": " CreationAuditedEntityDto$1<${2|Guid,int,string|}>$0",
    "description": "Inherits CreationAuditedEntityDto class",
    "prefix": "xInhCreationAuditedEntityDto"
  },
  "inheritsDomainService": {
    "body": " DomainService$1",
    "description": "Inherits DomainService class",
    "prefix": "xInhDomainService"
  },
  "inheritsDomainTestBase": {
    "body": " ${WORKSPACE_NAME}DomainTestBase$0",
    "description": "Inherits DomainTestBase class",
    "prefix": "xInhDomainTestBase"
  },
  "inheritsEntity": {
    "body": " Entity<${1|Guid,int,string|}>$0",
    "description": "Inherits Entity class",
    "prefix": "xInhEntity"
  },
  "inheritsEntityDto": {
    "body": " EntityDto$1<${2|Guid,int,string|}$3>$0",
    "description": "Inherits EntityDto class",
    "prefix": "xInhEntityDto"
  },
  "inheritsFullAuditedAggregateRoot": {
    "body": " FullAuditedAggregateRoot$1<${2|Guid,int,string|}>$0",
    "description": "Inherits FullAuditedAggregateRoot class",
    "prefix": "xInhFullAuditedAggregateRoot"
  },
  "inheritsFullAuditedEntity": {
    "body": " FullAuditedEntity$1<${2|Guid,int,string|}>$0",
    "description": "Inherits FullAuditedEntity class",
    "prefix": "xInhFullAuditedEntity"
  },
  "inheritsFullAuditedEntityDto": {
    "body": " FullAuditedEntityDto$1<${2|Guid,int,string|}>$0",
    "description": "Inherits FullAuditedEntityDto class",
    "prefix": "xInhFullAuditedEntityDto"
  },
  "inheritsPagedAndSortedResultRequestDto": {
    "body": " PagedAndSortedResultRequestDto$0",
    "description": "Inherits PagedAndSortedResultRequestDto class",
    "prefix": "xInhPagedAndSortedResultRequestDto"
  },
  "inheritsProjectNameAppService": {
    "body": [" ${1:${WORKSPACE_NAME}}AppService$0"],
    "description": "Inherits ProjectNameAppService class",
    "prefix": "xInhProjectNameAppService"
  },
  "inhSpecification": {
    "body": " Specification$1<${2:Type}>",
    "description": "Inherits Specification class",
    "prefix": "xInhSpecification"
  },
  "injectAppService": {
    "body": [
      "[Inject$1] ${2|private,protected,public|} I${4:$3}AppService$5 ${3:Name}AppService { get; set; }$0"
    ],
    "description": "Inserts [Inject] public IMyAppService MyAppService statement",
    "prefix": "xInjectIAppService"
  },
  "injectBlazoredILocalStorageService": {
    "body": [
      "[Inject$1] public ILocalStorageService LocalStorageService { get; set; }$0"
      
    ],
    "description": "Inserts [Inject] public ILocalStorageService LocalStorageService { get; set; } statement",
    "prefix": "xInjectBlazoredILocalStorageService"
  },
  "injectHttpClient": {
    "body": [
      "[Inject$1] public HttpClient$2 ${3|HttpClient,Http|} { get; set; }$0"
    ],
    "description": "Inject HttpClient property",
    "prefix": "xInjectHttpClient"
  },
  "injectIJSRuntime": {
    "body": [
      "[Inject$1] public IJSRuntime$2 ${3|JSRuntime,Js|} { get; set; }$0"
    ],
    "description": "Inject IJSRuntime property",
    "prefix": "xInjectIJSRuntime"
  },
  "injectIMapper": {
    "body": ["[Inject$1] public IMapper$2 ${3:Mapper} { get; set; }$0"],
    "description": "Inject IMapper property",
    "prefix": "xInjectIMapper"
  },
  "injectNavigationManager": {
    "body": [
      "[Inject$1] public NavigationManager$2 ${3|NavigationManager,Navigation,Nav|} { get; set; }$0"
    ],
    "description": "Inject NavigationManager property",
    "prefix": "xInjectNavigationManager"
  },
  "injectService": {
    "body": [
      "[Inject$1] ${2|protected,public|} I${4:$3} ${3:Name} { get; set; }$0"
    ],
    "description": "Inject IMyService MyService",
    "prefix": "xInjectService"
  },
  "iPermissionGrantRepositoryCtorParam": {
    "body": "IPermissionGrantRepository$1 permissionGrantRepository$0",
    "description": "Inserts an IPermissionGrantRepository permissionGrantRepository parameter in the constructor",
    "prefix": "xIPermissionGrantRepositoryCtorParamCtorParam"
  },
  "iPermissionManagerCtorParam": {
    "body": "IPermissionManager$1 permissionManager$0",
    "description": "Inserts an IPermissionManager permissionManager parameter in the constructor",
    "prefix": "xIPermissionManagerCtorParam"
  },
  "iRepoCtorCustomParam": {
    "body": "I${1:Name}Repository$2 ${1/^([A-Z])(.*)/${1:/downcase}$2/}Repository$0",
    "description": "Inserts a custom ClassRepository parameter in the constructor",
    "prefix": "xIRepoCtorCustomParam"
  },
  "iRepoCtorDefaultParam": {
    "body": "IRepository$1<${2:Type}, ${3|Guid,int,string|}> ${2/^([A-Z])(.*)/${1:/downcase}$2/}Repository$0",
    "description": "Inserts a default IRepository<Type,TypeId> parameter in the constructor",
    "prefix": "xIRepoCtorDefaultParam"
  },
  "iEmailSenderCtorParam": {
    "body": "IEmailSender$1 emailSender$0",
    "description": "Inserts a IEmailSender parameter in the constructor",
    "prefix": "xIEmailSender"
  },
  "iTemplateRendererCtorParam": {
    "body": "ITemplateRenderer$1 templateRenderer$0",
    "description": "Inserts a ITemplateRenderer parameter in the constructor",
    "prefix": "xITemplateRenderer"
  },
  "iDisableSoftDelete": {
    "body": [
      "using (${1|_dataFilter,_softDeleteFilter|}.Disable())",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts using (_softDeleteFilter.Disable()){} statement",
    "prefix": "xDisableISoftDelete"
  },
  "iSpecificationParam": {
    "body": "ISpecification$1<${2:Type}> spec$0",
    "description": "Inserts a ISpecification parameter",
    "prefix": "xISpecificationParam"
  },
  "iStringLocalizerCtorParam": {
    "body": "IStringLocalizer$1<${WORKSPACE_NAME}Resource> localizer$0",
    "description": "Inserts the IStringLocalizer parameter in the constructor",
    "prefix": "xIStringLocalizerCtorParam"
  },
  "iTenantManagerCtorParam": {
    "body": "ITenantManager$1 tenantManager$0",
    "description": "Inserts an ITenantManager tenantManger parameter in the constructor",
    "prefix": "xITenantManagerCtorParam"
  },
  "iTenantRepoCtorParam": {
    "body": "IRepository$1<Tenant§2, Guid> tenantRepository$0",
    "description": "Inserts an ITenantRepo parameter in the constructor",
    "prefix": "xITenantRepoCtorParam"
  },
  "iVirtualFileProviderCtorParam": {
    "body": "IVirtualFileProvider$1 virtualFileProvider$0",
    "description": "Inserts an IVirtualFileProvider virtualFileProvider parameter in the constructor",
    "prefix": "xIVirtualFileProviderCtorParam"
  },
  "managerCreateAsync": {
    "body": "var ${1/^([A-Z])(.*)/${1:/downcase}$2/} = await _${1:name}Manager$2.CreateAsync($3);$0",
    "description": "Inserts var x = await _nameManager.CreateAsync() statement",
    "prefix": "xManagerCreateAsync"
  },
  "managerFindByIdAsync": {
    "body": "var ${1/^([A-Z])(.*)/${1:/downcase}$2/} = await _${1:name}Manager$2.FindByIdAsync(${3:id});$0",
    "description": "Inserts var x = await _nameManager.FindByIdAsync() statement",
    "prefix": "xManagerFindByIdAsync"
  },
  "managerCustomCtorParam": {
    "body": "${1:Name}Manager$2 ${1/^([A-Z])(.*)/${1:/downcase}$2/}Manager$0",
    "description": "Inserts a custom Manager parameter in constructor",
    "prefix": "xManagerCustomCtorParam"
  },
  "managerUpdateAsync": {
    "body": "var ${1/^([A-Z])(.*)/${1:/downcase}$2/} = await _${1:name}Manager$2.UpdateAsync($3);$0",
    "description": "Inserts var name = await _nameManager.UpdateAsync() statement",
    "prefix": "xManagerUpdateAsync"
  },
  "map": {
    "body": "${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, ${3:DestinationType}>(${4:${2/(.*)/${1:/downcase}/}});$0",
    "description": "ObjectMapper.Map statement",
    "prefix": "xMap"
  },
  "MapDtoToType": {
    "body": "${1|ObjectMapper,_objectMapper|}.Map<${2:Source}Dto, ${3:$2}>(${4:${2/(.*)/${1:/downcase}/}}Dto);$0",
    "description": "ObjectMapper.Map from Dto to Type statement",
    "prefix": "xMapDtoToType"
  },
  "MapTypeToDto": {
    "body": "${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, ${3:$2}Dto>(${4:${2/(.*)/${1:/downcase}/}});$0",
    "description": "ObjectMapper.Map from Type To Dto statement",
    "prefix": "xMapTypeToDto"
  },
  "maxLengthConst": {
    "body": ["public const int Max${1:Name}Length = ${1:Length};$0"],
    "description": "Inserts a max length constant",
    "prefix": "xMaxLengthConst"
  },
  "methodAsyncReturn": {
    "body": [
      "${1|public,protected,private,internal |} async Task<${2:ReturnType}> ${3:MethodName}${4:Async}($5)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async task<ReturnType> method stub",
    "prefix": "xMethodAsyncTaskStubWithReturnValue"
  },
  "methodAsyncTaskStub": {
    "body": [
      "${1|public,protected,private,internal |} async Task$2 ${3:MethodName}${4:Async}($5)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async Task method stub",
    "prefix": "xMethodAsyncTaskStub"
  },
  "methodReturn": {
    "body": [
      "${1|public,protected,private,internal |} ${2:ReturnType} ${3:MethodName}($4)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a <ReturnType> method stub",
    "prefix": "xMethodStubWithReturnValue"
  },
  "methodVoid": {
    "body": [
      "${1|public,protected,private,internal |} void ${2:MethodName}($3)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a void method stub",
    "prefix": "xMethodVoidStub"
  },
  "navigateTo": {
    "body": [
      "${1|NavigationManager,Navigation,Nav,_navigationManager,_Navigation,_nav|}.NavigateTo(\"${2:routeUrl}\", ${3|false,true|});$0"
    ],
    "description": "Inserts NavigationManager.NavigateTo page",
    "prefix": "xNavigateTo"
  },
  "navigateToHomePage": {
    "body": [
      "${1|NavigationManager,Navigation,Nav,_navigationManager,_Navigation,_nav|}.NavigateTo(\"/\");$0"
    ],
    "description": "Inserts NavigationManager.NavigateTo(\"/\") ",
    "prefix": "xNavigateToHomePage"
  },
  "navigateToId": {
    "body": [
      "${1|NavigationManager,Navigation,Nav,_navigationManager,_Navigation,_nav|}.NavigateTo($\"${2:routeUrl}/{${3:id}}\", ${4|false,true|});$0"
    ],
    "description": "Inserts NavigationManager.NavigateTo page\\Id",
    "prefix": "xNavigateToId"
  },
  "navigationManager": {
    "body": "NavigationManager$1 navigationManager$0",
    "description": "Inserts a Navigation parameter in  a constructor",
    "prefix": "xNavigationManager"
  },
  "newObjectConstructor": {
    "body": [
      "var ${1/^([A-Z])(.*)/${1:/downcase}$2/} = new ${1:Type}$3($4)$0;"
    ],
    "description": "Instantiates a new object with constructor",
    "prefix": "xNewObjectConstructor"
  },
  "newObjectInitializer": {
    "body": [
      "var ${1/^([A-Z])(.*)/${1:/downcase}$2/} = new ${1:Type}$3",
      "{",
      "\t\t$4",
      "}$0;"
    ],
    "description": "Instantiates a new Object with initializer",
    "prefix": "xNewObjectInitializer"
  },
  "ngRokHttpEuropeRegion": {
    "body": ["ngrok http -region eu https://localhost:${1:44368}/ $0"],
    "description": "Inserts ngrok http -region eu https://localhost:44368/",
    "prefix": "xNgRokHttpEuropeRegion"
  },
  "notEmptyGuidAttribute": {
    "body": ["[NotEmptyGuid$1] $0"],
    "description": "Inserts NotEmptyGuidAttribute",
    "prefix": "xNotEmptyGuidAttribute"
  },
  "notifyError": {
    "body": "await Notify.Error(\"${1:Message}\");",
    "description": "Inserts await Notify.Error(Message) statement",
    "prefix": "xNotifyError"
  },
  "notifyInfo": {
    "body": "await Notify.Info(\"${1:Message}\");",
    "description": "Inserts await Notify.Info(Message) statement",
    "prefix": "xNotifyInfo"
  },
  "notifySuccess": {
    "body": "await Notify.Success(\"${1:Message}\");",
    "description": "Inserts await Notify.Success(Message) statement",
    "prefix": "xNotifySuccess"
  },
  "notifyWarn": {
    "body": "await Notify.Warn(\"${1:Message}\");",
    "description": "Inserts await Notify.Warn(Message) statement",
    "prefix": "xNotifyWarn"
  },
  "notNullAttribute": {
    "body": ["[NotNull$1] ${2:string} ${3:name}$0"],
    "description": "NotNull attribute",
    "prefix": "xNotNullAttribute"
  },
  "onAfterRender": {
    "body": [
      "${1|public,protected|} override void OnAfterRender(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnAfterRender method stub",
    "prefix": "xOnAfterRender"
  },
  "onAfterRenderAsync": {
    "body": [
      "${1|public,protected|} override async Task$2 OnAfterRenderAsync(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnAfterRenderAsync method stub",
    "prefix": "xOnAfterRenderAsync"
  },
  "onInitialized": {
    "body": [
      "${1|public,protected|}  override void OnInitialized()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnInitialized method stub",
    "prefix": "xOnInitialized"
  },
  "onInitializedAsync": {
    "body": [
      "${1|public,protected|} override async Task$2 OnInitializedAsync()",
      "{",
      "\t${3:await base.OnInitializedAsync();}",
      "\t$0",
      "}"
    ],
    "description": "OnInitializedAsync method stub",
    "prefix": "xOnInitializedAsync"
  },
  "onParametersSet": {
    "body": [
      "${1|public,protected|}  override void OnParametersSet()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnParameterSet method stub",
    "prefix": "xOnParametersSet"
  },
  "onApplicationInitialization": {
    "body": [
      "public override void OnApplicationInitialization(ApplicationInitializationContext context)",
      "{",
      "\t// var service = context.ServiceProvider.GetRequiredService<${1:YourServiceHere}>();",
      "\t// service.Initialize();$0",
      "}"
    ],
    "description": "OnApplicationInitialization method stub",
    "prefix": "xOnApplicationInitialization"
  },
  "onParametersSetAsync": {
    "body": [
      "${1|public,protected|} override async Task$2 OnParametersSetAsync()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnParameterSetAsync method stub",
    "prefix": "xOnParametersSetAsync"
  },
  "parameter": {
    "body": ["[Parameter$1] public string ${2:Name} { get; set; }$0"],
    "description": "Inserts property with Parameter attribute",
    "prefix": "xPara"
  },
  "parameterId": {
    "body": ["[Parameter$1] public string Id { get; set; }$0"],
    "description": "Inserts Id property with Parameter attribute",
    "prefix": "xParaId"
  },
  "permissionClass": {
    "body": [
      "public static class ${1:ClassName}",
      "{",
      "\tpublic const string Default = ${2:GroupName} + \".$1\";",
      "\tpublic const string Create = Default + \".Create\";",
      "\tpublic const string Update = Default+ \".Update\";",
      "\tpublic const string Delete = Default + \".Delete\";",
      "}$0"
    ],
    "description": "Inserts a static class with Default/Create/Update/Delete constants",
    "prefix": "xPermissionClass"
  },
  "PropertyHasMaxLengthIsRequired": {
    "body": [
      "b.Property(x => x.${1:Type}).HasMaxLength($1Consts.MaxNameLength).IsRequired();$0"
    ],
    "description": "Inserts b.Property.HasMaxLength.IsRequired statement",
    "prefix": "xPropertyHasMaxLengthIsRequired"
  },
  "propPrivateSetter": {
    "body": "public ${1:int } ${2:MyProperty} { get; private set; }$0",
    "description": "Inserts a property with private setter",
    "prefix": "xPropPrivateSetter"
  },
  "propId": {
    "body": ["public ${1|Guid,int,string|} ${2:Id} { get; set; }$0"],
    "description": "Inserts an Id property",
    "prefix": "xPropId"
  },
  "propName": {
    "body": ["public string ${1:Name} { get; set; }$0"],
    "description": "Inserts an Name property ",
    "prefix": "xPropName"
  },
  "propTitle": {
    "body": ["public string Title { get; set; }$0"],
    "description": "Inserts an Title property ",
    "prefix": "xPropTitle"
  },
  "propDescription": {
    "body": ["public string Description{ get; set; }$0"],
    "description": "Inserts a Description property ",
    "prefix": "xPropDescription"
  },
  "propStartDate": {
    "body": ["public DateTime$2 ${1:StartDate} { get; set; }$0"],
    "description": "Inserts a DateTime StartDate property ",
    "prefix": "xPropStartDate"
  },
  "propStartTime": {
    "body": ["public DateTime$2 ${1:StartTime} { get; set; }$0"],
    "description": "Inserts a DateTime StartTime property ",
    "prefix": "xPropStartTime"
  },
  "propEndDate": {
    "body": ["public DateTime$2 ${1:EndDate }{ get; set; }$0"],
    "description": "Inserts a DateTime EndDate property ",
    "prefix": "xPropEndDate"
  },
  "propEndTime": {
    "body": ["public DateTime$2 ${1:EndTime} { get; set; }$0"],
    "description": "Inserts a DateTime EndTime property ",
    "prefix": "xPropEndTime"
  },
  "propBirthDate": {
    "body": ["public DateTime$1 BirthDate { get; set; }$0"],
    "description": "Inserts an BirthDate property ",
    "prefix": "xPropBirthDate"
  },
  "propProtectedSetter": {
    "body": "public ${1:int } ${2:MyProperty} { get; protected set; }$0",
    "description": "Inserts a property with protected setter",
    "prefix": "xPropProtectedSetter"
  },
  "rangeAttribute": {
    "body": ["[Range$1(${2:0},${2:1000})]$0"],
    "description": "Range attribute",
    "prefix": "xRangeAttribute"
  },
  "readOnlyListLookupDto": {
    "body": [
      "protected IReadOnlyList$4<${1:Type}LookupDto$3> ${2:${1/(.*)/${1:/downcase}/}}List = Array$5.Empty<$1LookupDto>();",
      "// ${2:${1/(.*)/${1:/downcase}/}}List = (await AppService.Get$1LookupAsync()).Items;"
    ],
    "description": "Inserts an IReadOnlyList for a LookupDto object",
    "prefix": "xReadOnlyListLookupDto"
  },
  "repoDeleteAsync": {
    "body": [
      "await _${1:name}Repository.DeleteAsync$4(${2:id}, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts _repository.DeleteAsync statement",
    "prefix": "xRepoDeleteAsync"
  },
  "repoDeleteManyAsync": {
    "body": [
      "await _${1:name}Repository.DeleteManyAsync$4(${2:ids}, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts _repository.DeleteManyAsync statement",
    "prefix": "xRepoDeleteManyAsync"
  },
  "repoFindAsync": {
    "body": [
      "var ${2:$1} = await _${1:name}Repository.FindAsync$4(${3:id});",
      "$0"
    ],
    "description": "Inserts var x = _repository.FindAsync statement. Returns null when not found",
    "prefix": "xRepoFindAsync"
  },
  "repoFirstOrDefaultAsync": {
    "body": [
      "var ${2:$1} = await _${1:name}Repository.FirstOrDefaultAsync$5(x => x.${3:Id} == ${4:id});",
      "$0"
    ],
    "description": "Inserts var x = _repository.FindAsync statement",
    "prefix": "xRepoFirstOrDefaultAsync"
  },
  "repoGetAsync": {
    "body": [
      "var ${2:$1} = await _${1:name}Repository.GetAsync$4(${3:id});",
      "$0"
    ],
    "description": "Inserts var x = _repository.GetAsync statement. Throws EntityNotFoundException when not found",
    "prefix": "xRepoGetAsync"
  },
  "repoGetCountAsync": {
    "body": [
      "var ${1|totalCount,count,total|} = await _${2:name}Repository.GetCountAsync$3();",
      "$0"
    ],
    "description": "Inserts var totalCount = _repository.GetCountAsync statement",
    "prefix": "xRepoGetCountAsync"
  },
  "repoCountAsync": {
    "body": [
      "var ${1|totalCount,count,total|} = await _${2:name}Repository.CountAsync$3();$0"
    ],
    "description": "Inserts var totalCount = _repository.CountAsync statement",
    "prefix": "xRepoCountAsync"
  },
  "repositoryCountAsync": {
    "body": [
      "var ${1|totalCount,count,total|} = await Repository.CountAsync$3();$0"
    ],
    "description": "Inserts var totalCount = Repository.CountAsync statement",
    "prefix": "xRepositoryCountAsync"
  },
  "repoGetListAsync": {
    "body": [
      "var ${2:$1}s = await _${1:name}Repository.GetListAsync$3($4);",
      "$0"
    ],
    "description": "Inserts var items = await _repository.GetListAsync() statement",
    "prefix": "xRepoGetListAsync"
  },
  "repoEnsureCollectionLoadedAsync": {
    "body": [
      "var ${2:$1}s = await _${1:name}Repository.EnsureCollectionLoadedAsync(${3:$1}, f => f.${4:PropertyName})$0;"
    ],
    "description": "Inserts var items = await _repository.GetListAsync() statement",
    "prefix": "xRepoGetListAsync"
  },
  "repoGetListAsyncWithInputParams": {
    "body": [
      "var ${2:$1}s = await _${1:name}Repository.GetListAsync$3(input.Sorting, input.SkipCount, input.MaxResultCount);",
      "$0"
    ],
    "description": "Inserts var items = await _repository.GetListAsync() statement",
    "prefix": "xRepoGetListAsyncWithInputParams"
  },
  "RepoGetQueryableAsync": {
    "body": [
      "var queryable = await _${1:name}Repository.GetQueryableAsync$2();",
      "$0"
    ],
    "description": "Inserts var queryable = _repository.GetQueryableAsync() statement",
    "prefix": "xRepoGetQueryableAsync"
  },
  "RepositoryGetQueryableAsync": {
    "body": ["var queryable = await Repository.GetQueryableAsync$1();", "$0"],
    "description": "Inserts var queryable = Repository.GetQueryableAsync() statement",
    "prefix": "xRepositoryGetQueryableAsync"
  },
  "repoHardDeleteAsync": {
    "body": [
      "await _${1:name}Repository.HardDeleteAsync$4(${2:id}, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts _repository.HardDeleteAsync statement",
    "prefix": "xRepoHardDeleteAsync"
  },
  "repoInsertAsync": {
    "body": [
      "var inserted${1:name} = await _${2:${1/(.*)/${1:/downcase}/}}Repository.InsertAsync(${3:${1/(.*)/${1:/downcase}/}}$4, autoSave:${5|false,true|});$0"
    ],
    "description": "Inserts var inserted = await _repository.InsertAsync() statement",
    "prefix": "xRepoInsertAsync"
  },
  "repoInsertManyAsync": {
    "body": [
      "await _${1:name}Repository.InsertManyAsync(${2:$1}s, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts _repository.InsertManyAsync statement",
    "prefix": "xRepoInsertManyAsync"
  },
  "repoUpdateAsync": {
    "body": [
      "await _${1:name}Repository.UpdateAsync(${2:$1}, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts repository.UpdateAsync statement",
    "prefix": "xRepoUpdateAsync"
  },
  "repoUpdateManyAsync": {
    "body": [
      "await _${1:name}Repository.UpdateManyAsync(${2:$1}s, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts repository.UpdateManyAsync() statement",
    "prefix": "xRepoUpdateManyAsync"
  },
  "requiredAttribute": {
    "body": ["[Required$1]$0"],
    "description": "Inserts a Required Attribute",
    "prefix": "xRequiredAttribute"
  },
  "disableValidationAttribute": {
    "body": ["[DisableValidation$1]$0"],
    "description": "Inserts a DisableValidation Attribute",
    "prefix": "xDisableValidationAttribute"
  },
  "enableValidationAttribute": {
    "body": ["[EnableValidation$1]$0"],
    "description": "Inserts an EnableValidation Attribute",
    "prefix": "xEnableValidationAttribute"
  },
  "regularExpressionAttribute": {
    "body": [
      "[RegularExpression$1(\"${2:YourExpression}\", ErrorMessage = \"${3:YourErrorMessage}\")] $0"
    ],
    "description": "Inserts a RegularExpression Attribute",
    "prefix": "xRegularExpressionAttribute"
  },
  "bindPropertyAttribute": {
    "body": ["[BindProperty$1] $0"],
    "description": "Inserts BindProperty attribute",
    "prefix": "xBindPropertyAttribute"
  },
  "displayAttribute": {
    "body": ["[Display$1(Name = \"${2:Name} \")] $0"],
    "description": "Inserts Display attribute",
    "prefix": "xDisplayAttribute"
  },
  "blobContainerNameAttribute": {
    "body": ["[BlobContainerName$1(\"${1:YourBlobContainerName}\")] $0"],
    "description": "Inserts Required Attribute",
    "prefix": "xBlobContainerNameAttribute"
  },
  "returnDbContextSetFirstOrDefaultAsync": {
    "body": "return await ${1|dbContext, DbContext|}.Set<${2:Type}>().FirstOrDefaultAsync(${3:x} => $3.${4:propertyName} == $5);$0",
    "description": "Inserts return await DbContextSet.FirstOrDefaultAsync()",
    "prefix": "xReturnDbContextSetFirstOrDefaultAsync"
  },
  "returnDbContextSetToListAsync": {
    "body": "return await ${1|dbContext, DbContext|}.Set<${2:Type}>().Where$3(${4:x} => $4.${5:propertyName} == $6).ToListAsync();$0",
    "description": "Inserts return await DbContextSet.ToListAsync()",
    "prefix": "xReturnDbContextSetToListAsync"
  },
  "returnDbContextSetWhereToListAsync": {
    "body": "return await ${1|dbContext, DbContext|}.Set<${2:Type}>().Where(${3:x} => $3.${4:propertyName} == $5).ToListAsync()$6;$0",
    "description": "Inserts return await DbContextSetWhereToListAsync",
    "prefix": "xReturnDbContextSetWhereToListAsync"
  },
  "returnDbSetFirstOrDefaultAsync": {
    "body": "return await ${1|dbSet,DbSet|}.FirstOrDefaultAsync$2(${3:x} => $3.${4:propertyName} == $5);$0",
    "description": "Inserts return await DbSet.FirstOrDefaultAsync()",
    "prefix": "xReturnDbSetFirstOrDefaultAsync"
  },
  "returnDbSetToListAsync": {
    "body": [
      "// using System.Linq.Dynamic.Core",
      "",
      "return await ${1|dbSet,DbSet|}.",
      "\tWhereIf(",
      "\t\t!filter.IsNullOrWhiteSpace(),",
      "\t\tx => x.${2:PropertyName}.Contains(filter))",
      "\t.OrderBy(sorting)",
      "\t.Skip(skipCount)",
      "\t.Take(maxResultCount)",
      "\t.ToListAsync();"
    ],
    "description": "Inserts return await DbSet.ToListAsync()",
    "prefix": "xReturnDbSetToListAsync"
  },
  "returnListResultDto": {
    "body": [
      "return new ListResultDto<$3>(ObjectMapper.Map<List$1<${2:SourceType}>, List<${3:DestinationType}>>(${4:${2/(.*)/${1:/downcase}/}}s));$0"
    ],
    "description": "Inserts return new ListResultDto statement",
    "prefix": "xReturnListResultDto"
  },
  "returnObjectMap": {
    "body": "return ${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, ${3:DestinationType}>(${4:variable});$0",
    "description": "return ObjectMapper.Map statement",
    "prefix": "xReturnObjectMap"
  },
  "returnObjectMapperListTypeToListTypeDto": {
    "body": "return ${1|ObjectMapper,_objectMapper|}.Map<List<${2:Type}>, List<${3:$2}Dto>>(${4:input});$0",
    "description": "return ObjectMapper.Map<List<Type>,List<TypeDto>> statement",
    "prefix": "xReturnObjectMapperListTypeToListTypeDto"
  },
  "returnObjectMapTypeToDto": {
    "body": "return ${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, $2Dto>(${3:${2/(.*)/${1:/downcase}/}});$0",
    "description": "return ObjectMapper.Map from SourceType to Dto statement",
    "prefix": "xReturnObjectMapTypeToDto"
  },
  "returnPagedResultDto": {
    "body": [
      "return new PagedResultDto<$1Dto>(totalCount, ${1/(.*)/${1:/downcase}/}Dtos);$0"
    ],
    "description": "Inserts return new PagedResultDto statement",
    "prefix": "xReturnPagedResultDto"
  },
  "returnPagedResultDtoObjectMapper": {
    "body": [
      "return new PagedResultDto<$1Dto>(${2|totalCount,count|}, ${3|ObjectMapper,_objectMapper|}.Map<List$4<${1:SourceType}>, List<$1Dto>>(${1/(.*)/${1:/downcase}/}s));$0"
    ],
    "description": "Inserts return new PagedResultDto with ObjectMapper statement",
    "prefix": "xReturnPagedResultDtoObjectMapper"
  },
  "stringLengthAttribute": {
    "body": ["[StringLength(${1:50})$2]$0"],
    "description": "StringLength attribute",
    "prefix": "xStringLengthAttribute"
  },
  "tenantIdGuidProperty": {
    "body": ["public Guid? TenantId { get; set; }$0"],
    "description": "Inserts public Guid? TenantId { get; set; } property ",
    "prefix": "xTenantIdGuidProperty"
  },
  "tenantIdStringProperty": {
    "body": ["public string TenantId { get; set; }$0"],
    "description": "Inserts public string TenantId { get; set; } property ",
    "prefix": "xTenantIdStringProperty"
  },
  "throwBusinessException": {
    "body": ["throw new BusinessException$1(\"${2:TranslationKey}\");"],
    "description": "Inserts throw new BusinessException statement",
    "prefix": "xThrowBusinessException"
  },
  "throwAlreadyExistsException": {
    "body": ["throw new ${1:TypeName}AlreadyExistsException$2($3);$0"],
    "description": "Inserts throw new AlreadyExistsException statement",
    "prefix": "xThrowAlreadyExistsException"
  },
  "throwAbpValidationException": {
    "body": [
      "throw new AbpValidationException$1(",
      "\tnew List<ValidationResult$2>",
      "\t{",
      "\t\tnew ValidationResult(",
      "\t\t\t\"${3:YourErrorMessageHere}\",",
      "\t\t\tnew[] {nameof(${4:PropertyName})}",
      "\t\t)",
      "\t}",
      ");$0"
    ],
    "description": "Inserts throw new AbpValidationException statement",
    "prefix": "xThrowAbpValidationException"
  },
  "throwCustomException": {
    "body": ["throw new ${1:Name}Exception(\"${2:TranslationKey}\");"],
    "description": "Inserts throw new CustomException statement",
    "prefix": "xThrowCustomException"
  },
  "throwEntityNotFoundException": {
    "body": ["throw new EntityNotFoundException$1($2);$0"],
    "description": "Inserts throw new EntityNotFoundException statement",
    "prefix": "xThrowEntityNotFoundException"
  },
  "throwNotImplementedException": {
    "body": ["throw new System.NotImplementedException();"],
    "description": "Inserts throw new NotImplementedException statement",
    "prefix": "xThrowNotImplementedException"
  },
  "throwUnauthorizedAccessException": {
    "body": ["throw new UnauthorizedAccessException();"],
    "description": "Inserts throw new UnauthorizedAccessException statement",
    "prefix": "xThrowUnauthorizedAccessException"
  },
  "throwUserFriendlyException": {
    "body": ["throw new UserFriendlyException$1(\"${2:ExceptionMessage}\");"],
    "description": "Inserts throw new UserFriendlyException statement",
    "prefix": "xThrowUserFriendlyException"
  },
  "todo": {
    "body": "// TODO $0",
    "description": "Inserts TODO statement",
    "prefix": "xTodo"
  },
  "unAssertThrowsAsyncAbpValidationException": {
    "body": [
      "var exception = await Assert.ThrowsAsync<AbpValidationException$1>(async () =>",
      "{",
      "\tawait _${2:Name}AppService.${3|GetAsync,GetListAsync,CreateAsync,UpdateAsync,DeleteAsync|} (",
      "\t\tnew ${4:Name}Dto",
      "\t\t{",
      "\t\t\t${5:PropertyName} = ${6:PropertyValue}$7",
      "\t\t}",
      "\t);",
      "});",
      "",
      "exception.ValidationErrors.ShouldContain$8(err => err.MemberNames.Any$8(mem => mem == \"${9:$5}\"));"
    ],
    "description": "Inserts var exception = Assert.ThrowsAsync<AbpValidationException>",
    "prefix": "xUnAssertThrowsAsyncAbpValidationException"
  },
  "unAssertThrowsAsyncBusinessException": {
    "body": [
      "var exception = await Assert.ThrowsAsync<BusinessException>(async () =>",
      "{",
      "\t // statement that throws exception comes here",
      "\t $1",
      "});",
      "",
      "// exception.Code.ShouldBe(\"${2:YourExceptionCode}\");",
      "exception.Message.ShouldBe(\"${2:YourExceptionMessage}\");"
    ],
    "description": "Inserts var exception = Assert.ThrowsAsync<BusinessException>",
    "prefix": "xUnAssertThrowsAsyncBusinessException"
  },
  "unAssertThrowsAsyncCustomException": {
    "body": [
      "await Assert.ThrowsAsync<${1:YourCustomException}$2>(async () =>",
      "{",
      "\t // statement that throws exception comes here",
      "\t $0",
      "});"
    ],
    "description": "Inserts Assert.ThrowsAsync<YourCustomException>",
    "prefix": "xUnAssertThrowsAsyncCustomException"
  },
  "unAssertThrowsCustomException": {
    "body": [
      "Assert.Throws<${1:YourCustom}Exception$2>(() =>",
      "{",
      "\t // statement that throws exception comes here",
      "\t",
      "});"
    ],
    "description": "Inserts Assert.Throws<YourCustomException>",
    "prefix": "xUnAssertThrowsCustomException"
  },
  "unCreateAsyncAppService": {
    "body": [
      "var result = await _${3:${2/(.*)/${1:/downcase}/}}AppService.CreateAsync(",
      "\tnew ${1|CreateUpdate,Create|}${2:Type}Dto$4",
      "\t{",
      "\t\t${5:PropertyName} = ${6:PropertyValue}$7",
      "\t}",
      ");$0"
    ],
    "description": "Inserts var result = await AppService.CreateAsync statement",
    "prefix": "xUnCreateAsyncAppService"
  },
  "unGetListAsyncAppService": {
    "body": "var ${1:result} = await _${2:name}AppService.GetListAsync(${3:new PagedAndSortedResultRequestDto}$4()$5);$0",
    "description": "Inserts var result = await AppService.GetListAsync statement",
    "prefix": "xUnGetListAsyncAppService"
  },
  "unGetRequiredIAppService": {
    "body": [
      "_${4:${1/(.*)/${1:/downcase}/}}AppService = GetRequiredService<I${1:Name}AppService$2>();$0",
      "private readonly I${3:$1}AppService _${5:$4}AppService$6;"
    ],
    "description": "Inserts GetRequiredService<IAppService> and IAppService field",
    "prefix": "xUnGetRequiredIAppService"
  },
  "unGetRequiredService": {
    "body": [
      "_${4:${1/(.*)/${1:/downcase}/}} = GetRequiredService<${1:NameService}$2>();$0",
      "private readonly ${3:$1} _${5:$4}$6;"
    ],
    "description": "Inserts GetRequiredService and matching field",
    "prefix": "xUnGetRequiredService"
  },
  "unitOfWorkAttribute": {
    "body": "[UnitOfWork(isTransactional: true)]",
    "description": "Inserts the UnitOfWorkAttribute",
    "prefix": "xUnitOfWorkAttribute"
  },
  "unMethodTaskStub": {
    "body": [
      "[Fact$1]",
      "public async Task$2 ${3:Should}_${4:Name_Of_Your_Test}()",
      "{",
      "\t $0",
      "",
      "",
      "}"
    ],
    "description": "a xUnit test Task method stub",
    "prefix": "xUnMethodTaskStub"
  },
  "unMethodVoidStub": {
    "body": [
      "[Fact$1]",
      "public void ${2:Should}_${3:Name_Of_Your_Test}()",
      "{",
      "\t$0",
      "",
      "",
      "}"
    ],
    "description": "a xUnit test void method stub",
    "prefix": "xUnMethodVoidStub"
  },
  "unResultIdShouldNotBeGuidEmpty": {
    "body": "result.Id.ShouldNotBe$1(Guid$2.Empty);$0",
    "description": "Inserts result.Id.ShouldNotBe(Guid.Empty)",
    "prefix": "xUnResultIdShouldNotBeGuidEmpty"
  },
  "unResultItemsShouldContain": {
    "body": "result.Items.ShouldContain$1(i => i.$2);$0",
    "description": "Inserts result.Items.ShouldContain statement",
    "prefix": "xUnResultItemsShouldContain"
  },
  "unResultItemsShouldNotContain": {
    "body": "result.Items.ShouldNotContain$1(i => i.$2);$0",
    "description": "Inserts result.Items.ShouldNotContain statement",
    "prefix": "xUnResultItemsShouldNotContain"
  },
  "unResultPropertyShouldBe": {
    "body": "result.${1:PropertyName}.ShouldBe$2(${3:Value});$0",
    "description": "Inserts result.PropertyName.ShouldBe(Value) statement",
    "prefix": "xUnResultPropertyShouldBe"
  },
  "unResultShouldBe": {
    "body": "result.${1:PropertyName}.ShouldBe$2(${3:Value});$0",
    "description": "Inserts result.PropertyName.ShouldBe(Value) statement",
    "prefix": "xUnResultShouldBe"
  },
  "unResultTotalCountShouldBe": {
    "body": "result.TotalCount.ShouldBe$1(${2:totalCount});$0",
    "description": "Inserts result.TotalCount.ShouldBe statement",
    "prefix": "xUnResultTotalCountShouldBe"
  },
  "unResultTotalCountShouldBeGreaterThan": {
    "body": "result.TotalCount.ShouldBeGreaterThan$1(${2:totalCount});$0",
    "description": "Inserts result.TotalCount.ShouldBeGreaterThan statement",
    "prefix": "xUnResultTotalCountShouldBeGreaterThan"
  },
  "unResultTotalCountShouldBeGreaterThanOrEqual": {
    "body": "result.TotalCount.ShouldBeGreaterThanOrEqualTo$1(${2:totalCount});$0",
    "description": "Inserts result.TotalCount.ShouldBeGreaterThanOrEqual statement",
    "prefix": "xUnResultTotalCountShouldBeGreaterOrEqual"
  },
  "urlAttribute": {
    "body": ["[Url$1]$0"],
    "description": "Url attribute",
    "prefix": "xUrlAttribute"
  },
  "usingSystemLinqDynamicCore": {
    "body": "using System.Linq.Dynamic.Core;$0",
    "description": "Inserts using System.Linq.Dynamic.Core statement",
    "prefix": "xUsingSystemLinqDynamicCore"
  },
  "varObjectMapperMap": {
    "body": "var ${1:result} = ${2|ObjectMapper,_objectMapper|}.Map<${3:SourceType}, ${4:DestinationType}>(${5:input});$0",
    "description": "var result = ObjectMapper.Map<SourceType,DestinationType>(input) statement",
    "prefix": "xVarObjectMapperMap"
  },
  "varObjectMapperMapCreateDtoToType": {
    "body": [
      "var ${3:${2/(.*)/${1:/downcase}/}} = ${1|ObjectMapper,_objectMapper|}.Map<Create${2:}Dto, $2>(${5:input});$0"
    ],
    "description": "var type = ObjectMapper.Map<CreateDto, TypeDto>(input) statement",
    "prefix": "xVarObjectMapperMapCreateDtoToType"
  },
  "varObjectMapperMapDtoToType": {
    "body": [
      "var ${3:${2/(.*)/${1:/downcase}/}} = ${1|ObjectMapper,_objectMapper|}.Map<${2:}Dto, $2>(${5:input});$0"
    ],
    "description": "var type = ObjectMapper.Map<Dto, TypeDto>(input) statement",
    "prefix": "xVarObjectMapperMapDtoToType"
  },
  "varObjectMapperMapUpdateDtoToType": {
    "body": [
      "var ${3:${2/(.*)/${1:/downcase}/}} = ${1|ObjectMapper,_objectMapper|}.Map<Update${2:}Dto, $2>(${5:input});$0"
    ],
    "description": "var type = ObjectMapper.Map<UpdateDto, TypeDto>(input) statement",
    "prefix": "xVarObjectMapperMapUpdateDtoToType"
  },
  "withData": {
    "body": ["\t\tWithData(\"${1:parameterName}\", ${2:$1});"],
    "description": "Inserts a WithData statement",
    "prefix": "xWithData"
  },
  "xCreateAsyncMethodStub": {
    "body": "public Task$1<${2:Type}Dto> CreateAsync(Create${2:$1}Dto input);$0",
    "description": "Adds a CreateAsync method stub",
    "prefix": "xCreateAsyncMethodStub"
  },
  "xCreatePolicy": {
    "body": [
      "CreatePolicyName = ${WORKSPACE_NAME}Permissions.${1:ClassName}s.Create;"
    ],
    "description": "Inserts CreatePolicyName statement",
    "prefix": "xCreatePolicyName"
  },
  "xDeleteAsyncMethodStub": {
    "body": "public Task$1 DeleteAsync(${2|Guid,int,string|} id);$0",
    "description": "Adds a DeleteAsync method stub",
    "prefix": "xDeleteAsyncMethodStub"
  },
  "xDeletePolicy": {
    "body": [
      "DeletePolicyName = ${WORKSPACE_NAME}Permissions.${1:ClassName}s.Delete;"
    ],
    "description": "Inserts DeletePolicyName statement",
    "prefix": "xDeletePolicyName"
  },
  "xGetListPolicy": {
    "body": [
      "GetListPolicyName = ${WORKSPACE_NAME}Permissions.${1:ClassName}s.Default;"
    ],
    "description": "Inserts GetListPolicyName statement",
    "prefix": "xGetListPolicyName"
  },
  "xGetPolicy": {
    "body": [
      "GetPolicyName = ${WORKSPACE_NAME}Permissions.${1:ClassName}s.Default;"
    ],
    "description": "Inserts GetPolicyName statement",
    "prefix": "xGetPolicyName"
  },
  "xGroupNamePermissionConst": {
    "body": "public const string ${2:$1}Group = \"${1:GroupName}\";$0",
    "description": "Inserts a permission GroupName constant",
    "prefix": "xGroupNamePermissionConst"
  },
  "xQueryableWithDetailsAsync": {
    "body": [
      "var queryable = await _${1:name}Repository.WithDetailsAsync(x => x.${2:Type}{);$0"
    ],
    "description": "Inserts var queryable = _repository.GetQueryableAsync() statement",
    "prefix": "xQueryableWithDetailsAsync"
  },
  "xUpdatePolicy": {
    "body": [
      "UpdatePolicyName = ${WORKSPACE_NAME}Permissions.${1:ClassName}s.Update;"
    ],
    "description": "Inserts UpdatePolicyName statement",
    "prefix": "xUpdatePolicyName"
  }
}
