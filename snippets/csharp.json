{
  "addPermissionGroupToContext": {
    "body": "var ${1:name}Group = context.AddGroup(${TM_FILENAME/PermissionDefinitionProvider.cs//}Permissions.GroupName);",
    "description": "Add group permission to context in PermissionDefinitionProvider.cs",
    "prefix": "xAddPermissionGroupToContext"
  },
  "addPermissionToGroup": {
    "body": [
      "var ${1:name}Permission = ${2:name}Group.AddPermission(${3:${TM_FILENAME/PermissionDefinitionProvider.cs//}}Permissions.${4:ClassName}.Default, L(\"Permission:$4\"));",
      "$1Permission.AddChild($3Permissions.$4.Create, L(\"Permission:$4:Create\"));",
      "$1Permission.AddChild($3Permissions.$4.Update, L(\"Permission:$4:Update\"));",
      "$1Permission.AddChild($3Permissions.$4.Delete, L(\"Permission:$4:Delete\"));",
      "",
      "// Translations -> paste in en.json in Domain.Shared\\localization folder",
      "//\"Permission:$3\": \"$3\",",
      "//\"Permission:$4\": \"$4 Management\",",
      "//\"Permission:$4:Create\": \"Creating ${5:item}s\",",
      "//\"Permission:$4:Update\": \"Editing $5s\",",
      "//\"Permission:$4:Delete\": \"Deleting $5s\",$0"
    ],
    "description": "Adds permission to group in PermissionDefinitionProvider.cs ",
    "prefix": "xAddPermissionToGroup"
  },
  "addPolicyPermissions": {
    "body": [
      "\tGetPolicyName = ${WORKSPACE_NAME}Permissions$1.${2:ClassName}.Default;",
      "\tGetListPolicyName = ${WORKSPACE_NAME}Permissions.$2.Default;",
      "\tCreatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Create;",
      "\tUpdatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Update;",
      "\tDeletePolicyName = ${WORKSPACE_NAME}Permissions.$2.Delete;"
    ],
    "description": "Adds policy permissions",
    "prefix": "xAddPolicyPermissions"
  },
  "appServiceClassStub": {
    "body": [
      "// [Authorize(${WORKSPACE_NAME}Permissions.${TM_FILENAME_BASE/AppService//}.Default)] ",
      "public class ${TM_FILENAME_BASE} : ${WORKSPACE_NAME}AppService, I${TM_FILENAME_BASE}$1",
      "{",
      "\tpublic ${TM_FILENAME_BASE}($2)",
      "\t{",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Inserts a complete AppService class stub based upon the [YourProjectName]AppService class",
    "prefix": "xAppServiceClassStub"
  },
  "applicationMenuItemIcon": {
    "body": [
      "var ${1/^([A-Z])/${1:/downcase}/}sMenu = new ApplicationMenuItem(\"${1:MenuName}sMenu\",l[\"Menu:$1s\"], icon: \"${2:fa fa-book}\");",
      "// \"Menu:$1s\": \"$1s\","
    ],
    "description": "New ApplicationMenuItem variable with icon",
    "prefix": "xApplicationMenuItemIcon"
  },
  "applicationMenuItemUrl": {
    "body": [
      "var ${1/^([A-Z])/${1:/downcase}/}sMenu = new ApplicationMenuItem(\"${1:MenuName}sMenu\",l[\"Menu:$1s\"], url: \"/${2:${1/(.*)/${1:/downcase}/}}s\");",
      "// \"Menu:$1s\": \"$1s\","
    ],
    "description": "New ApplicationMenuItem variable with url",
    "prefix": "xApplicationMenuItemUrl"
  },
  "asyncExecuterCountAsync": {
    "body": [
      "// using System.Linq;",
      "var ${1|totalCount,count,total|} = await ${2|_asyncExecuter,AsyncExecuter|}.CountAsync$3(${4:query});"
    ],
    "description": "Inserts AsyncExecuter.CountAsync statement",
    "prefix": "xAsyncExecuterCountAsync"
  },
  "asyncExecuterFirstOrDefaultAsync": {
    "body": [
      "var ${1:queryResult} = await ${2|_asyncExecuter,AsyncExecuter|}.FirstOrDefaultAsync$3(${4:query});"
    ],
    "description": "Inserts AsyncExecuter.FirstOrDefaultAsync statement",
    "prefix": "xAsyncExecuterFirstOrDefaultAsync"
  },
  "asyncExecuterToListAsync": {
    "body": [
      "var ${1:queryResult} = await ${2|_asyncExecuter,AsyncExecuter|}.ToListAsync$3(${4:query});"
    ],
    "description": "Inserts AsyncExecuter.ToListAsync statement",
    "prefix": "xAsyncExecuterToListAsync"
  },
  "authorizeAttributeAbp": {
    "body": [
      "[Authorize$1(${WORKSPACE_NAME}Permissions$3.${4:${TM_FILENAME_BASE/AppService//}}.${5|Default,Create,Update,Delete|})]$0"
    ],
    "description": "Inserts the ABP Authorize attribute for a class or a method",
    "prefix": "xAuthorizeAttributeAbp"
  },
  "authorizeAttributeMicrosoft": {
    "body": [
      "[Authorize$1]$0"
    ],
    "description": "Inserts the Microsoft.AspNetCore.Authorization Authorize attribute",
    "prefix": "xAuthorizeAttributeMicrosoft"
  },
  "builderEntity": {
    "body": [
      "builder.Entity<${1:ClassName}>(b =>",
      "{",
      "\tb.ToTable(${WORKSPACE_NAME}Consts.DbTablePrefix + \"${2:$1}s\", ${WORKSPACE_NAME}Consts.DbSchema);",
      "\tb.ConfigureByConvention$4();",
      "",
      "\t$5//b.Property(x => x.Name).IsRequired().HasMaxLength(${3:$1}Consts$6.MaxNameLength);",
      "\t$7// b.HasIndex(x => x.Name);",
      "});$0"
    ],
    "description": "builder.Entity stub",
    "prefix": "xBuilderEntity"
  },
  "businessExceptionClass": {
    "body": [
      "public class ${TM_FILENAME_BASE}  : BusinessException$1",
      "{",
      "\tpublic ${TM_FILENAME_BASE}(${2:string} ${3:name})",
      "\t\t: base(${WORKSPACE_NAME}DomainErrorCodes.${4:${TM_FILENAME_BASE/Exception//}})",
      "\t{",
      "\t\tWithData$5(\"${6:$3}\", ${7:$3});",
      "\t}",
      "}"
    ],
    "description": "Inserts a complete CustomException class that inherits from class BusinessException",
    "prefix": "xBusinessExceptionClass"
  },
  "canBeNullAttribute": {
    "body": [
      "[CanBeNull$1] ${2:string} ${3:name} = null$0"
    ],
    "description": "CanBeNull attribute",
    "prefix": "xCanBeNullAttribute"
  },
  "canCreate": {
    "body": [
      "canCreate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:ClassName}.Create);",
      "protected bool canCreate${3:$1};$0"
    ],
    "description": "Boolean canCreate variable and checks if Create is granted",
    "prefix": "xCanCreate"
  },
  "canCrudMethods": {
    "body": [
      "// using Microsoft.AspNetCore.Authorization;",
      "// using ${WORKSPACE_NAME}.Permissions;",
      "",
      "$0protected bool canCreate$1;",
      "protected bool canUpdate$1;",
      "protected bool canDelete$1;",
      "",
      "canCreate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:$1}.Create);",
      "canUpdate$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$2.Update);",
      "canDelete$1 = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.$2.Delete);"
    ],
    "description": "Checks if CRUD methods are granted",
    "prefix": "xCanCrudMethods"
  },
  "canDelete": {
    "body": [
      "canDelete${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:ClassName}.Delete);",
      "protected bool canDelete${3:$1};$0"
    ],
    "description": "Boolean canDelete variable and checks if Delete is granted",
    "prefix": "xCanDelete"
  },
  "canUpdate": {
    "body": [
      "canUpdate${1:Name} = await AuthorizationService.IsGrantedAsync(${WORKSPACE_NAME}Permissions.${2:ClassName}.Update);",
      "protected bool canUpdate${3:$1};$0"
    ],
    "description": "boolean canUpdate variable and checks if Edit/Update is granted",
    "prefix": "xCanUpdate"
  },
  "checkGetListPolicyAsync": {
    "body": [
      "await CheckGetListPolicyAsync$1();$0"
    ],
    "description": "Inserts await CheckGetListPolicyAsync()",
    "prefix": "xCheckGetListPolicyAsync"
  },
  "checkGetPolicyAsync": {
    "body": [
      "await CheckGetPolicyAsync$1();$0"
    ],
    "description": "Inserts await CheckGetPolicyAsync()",
    "prefix": "xCheckGetPolicyAsync"
  },
  "checkNotNull": {
    "body": "Check$1.NotNull(${2:value}, nameof(${3:$2}));$0",
    "description": "Check.NotNull statement",
    "prefix": "xCheckNotNull"
  },
  "checkNotNullMaxLength": {
    "body": "Check$1.NotNull(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647});$0",
    "description": "Check.NotNull (+ MaxLength) statement",
    "prefix": "xCheckNotNullMaxLength"
  },
  "checkNotNullMaxMinLength": {
    "body": "Check$1.NotNull(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647}, minLength: ${5:0});$0",
    "description": "Check.NotNull (+ Max/MinLength) statement",
    "prefix": "xCheckNotNullMaxMinLength"
  },
  "checkNotNullOrEmpty": {
    "body": "Check$1.NotNullOrEmpty(${2:value}, nameof(${3:$2}));$0",
    "description": "Check.NotNullOrEmpty statement",
    "prefix": "xCheckNotNullOrEmpty"
  },
  "checkNotNullOrEmptyMaxLength": {
    "body": "Check$1.NotNullOrEmpty(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647});$0",
    "description": "Check.NotNullOrEmpty (+ MaxLength) statement",
    "prefix": "xCheckNotNullOrEmptyMaxLength"
  },
  "checkNotNullOrEmptyMaxMinLength": {
    "body": "Check$1.NotNullOrEmpty(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647}, minLength: ${5:0});$0",
    "description": "Check.NotNullOrEmpty (+ Max/MinLength) statement",
    "prefix": "xCheckNotNullOrEmptyMaxMinLength"
  },
  "checkNotNullOrWhiteSpace": {
    "body": "Check$1.NotNullOrWhiteSpace(${2:value}, nameof(${3:$2}));$0",
    "description": "Check.NotNullOrWhiteSpace statement",
    "prefix": "xCheckNotNullOrWhiteSpace"
  },
  "checkNotNullOrWhiteSpaceMaxLength": {
    "body": "Check$1.NotNullOrWhiteSpace(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647});$0",
    "description": "Check.NotNullOrWhiteSpace (+ MaxLength) statement",
    "prefix": "xCheckNotNullOrWhiteSpaceMaxLength"
  },
  "checkNotNullOrWhiteSpaceMaxMinLength": {
    "body": "Check$1.NotNullOrWhiteSpace(${2:value}, nameof(${3:$2}), maxLength: ${4:2147483647}, minLength: ${5:0});$0",
    "description": "Check.NotNullOrWhiteSpace (+ Max/MinLength) statement",
    "prefix": "xCheckNotNullOrWhiteSpaceMaxMinLength"
  },
  "createMap": {
    "body": "CreateMap<${1:SourceType}Dto,${2:DestinationType}>();$0",
    "description": "CreateMap from [Type]Dto to [Type] statement",
    "prefix": "xCreateMap"
  },
  "createMapFromCreateDtoToType": {
    "body": "CreateMap<Create${1:SourceType}Dto, $1>();$0",
    "description": "CreateMap from Create[Type]Dto to [Type] statement",
    "prefix": "xCreateMapFromCreateDtoToType"
  },
  "createMapFromCreateUpdateDtoToType": {
    "body": "CreateMap<CreateUpdate${1:SourceType}Dto, $1>();$0",
    "description": "CreateMap from CreateUpdate[Type]Dto to [Type] statement",
    "prefix": "xCreateMapFromCreateUpdateDtoToType"
  },
  "createMapFromDtoToToUpdateDto": {
    "body": "CreateMap<${1:SourceType}Dto, Update$1Dto>();$0",
    "description": "CreateMap from [Type]Dto to Update[Type]Dto statement",
    "prefix": "xCreateMapFromDtoToUpdateDto"
  },
  "createMapFromToCreateUpdateDto": {
    "body": "CreateMap<${1:SourceType}Dto, CreateUpdate$1Dto>();$0",
    "description": "CreateMap from [Type]Dto to CreateUpdate[Type]Dto statement",
    "prefix": "xCreateMapFromDtoToCreateUpdateDto"
  },
  "createMapFromToLookupDto": {
    "body": "CreateMap<${1:SourceType}, $1LookupDto>();$0",
    "description": "CreateMap from [Type] to [Type]LookupDto statement",
    "prefix": "xCreateMapFromToLookupDto"
  },
  "createMapFromUpdateDtoToType": {
    "body": "CreateMap<Update${1:SourceType}Dto, $1>();$0",
    "description": "CreateMap from Update[Type]Dto to [Type] statement",
    "prefix": "xCreateMapFromUpdateDtoToType"
  },
  "createMapToDto": {
    "body": "CreateMap<${1:SourceType},${2:$1}Dto>();$0",
    "description": "CreateMap [Type] to [Type]Dto statement",
    "prefix": "xCreateMapToDto"
  },
  "crudAppServiceCreateDtoUpdateDto": {
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} : CrudAppService<${2:Type}, ${3:$2}Dto, ${4|int,Guid,string|}$5, PagedAndSortedResultRequestDto$6, Create$2Dto, Update$2Dto>, I$2AppService",
      "{",
      "\tpublic ${7:$1}(IRepository<$2, ${8:$4}> repository): base(repository)",
      "\t{",
      "\t\t// GetPolicyName = ${WORKSPACE_NAME}Permissions.$2.Default;",
      "\t\t// GetListPolicyName = ${WORKSPACE_NAME}Permissions.$2.Default;",
      "\t\t// CreatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Create;",
      "\t\t// UpdatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Update;",
      "\t\t// DeletePolicyName = ${WORKSPACE_NAME}Permissions.$2.Delete;",
      "\t}",
      "}$0"
    ],
    "description": "Inserts a complete CrudAppService class with CreateDto and UpdateDto separated",
    "prefix": "xCrudAppServiceCreateDtoAndUpdateDto"
  },
  "crudAppServiceCreateUpdateDto": {
    "body": [
      "public class ${1:${TM_FILENAME_BASE}} : CrudAppService<${2:Type}, ${3:$2}Dto, ${4|int,Guid,string|}$5, PagedAndSortedResultRequestDto$6, CreateUpdate$2Dto>, I$2AppService",
      "{",
      "\tpublic ${7:$1}(IRepository<$2, ${8:$4}> repository): base(repository)",
      "\t{",
      "\t\t// GetPolicyName = ${WORKSPACE_NAME}Permissions.$2.Default;",
      "\t\t// GetListPolicyName = ${WORKSPACE_NAME}Permissions.$2.Default;",
      "\t\t// CreatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Create;",
      "\t\t// UpdatePolicyName = ${WORKSPACE_NAME}Permissions.$2.Update;",
      "\t\t// DeletePolicyName = ${WORKSPACE_NAME}Permissions.$2.Delete;",
      "\t}",
      "}$0"
    ],
    "description": "Inserts a complete CrudAppService class with CreateUpdateDto combined",
    "prefix": "xCrudAppServiceCreateUpdateDto"
  },
  "ctor": {
    "body": [
      "${1|private,internal,protected,public|} ${TM_FILENAME_BASE/.razor//}($2)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "constructor stub",
    "prefix": "xCtor"
  },
  "ctorBusinessException": {
    "body": [
      "public ${TM_FILENAME_BASE}(${1:string} ${2:name})",
      "\t: base(${3:${WORKSPACE_NAME}}DomainErrorCodes.${4:${TM_FILENAME_BASE/Exception//}})",
      "{",
      "\tWithData$5(\"${6:$2}\", ${7:$2});",
      "}"
    ],
    "description": "constructor stub in a class derived from BusinessException",
    "prefix": "xCtorBusinessException"
  },
  "dataTypeAttribute": {
    "body": "[DataType$1(DataType.${2|CreditCard,Currency,Custom,Date,DateTime,Duration,EmailAddress,Html,ImageUrl,MultilineText,PhoneNumber|})]",
    "description": "DataType attribute",
    "prefix": "xDataTypeAttribute"
  },
  "dbSet": {
    "body": "public DbSet<${1:ClassName}$2> ${3:$1}s { get; set; }$0",
    "description": "Inserts a DbSet for a class statement in DbContext",
    "prefix": "xDbSet"
  },
  "efCoreRepositoryClassStub": {
    "body": [
      "public class ${1:ClassName}Repository : EfCoreRepository$2<${3:${WORKSPACE_NAME}}DbContext, ${4:$1}$5, ${6|int,Guid,string|}$7>, I${8:$1}Repository$11",
      "{",
      "public $1Repository(IDbContextProvider$9<${10:$3}DbContext> dbContextProvider) : base(dbContextProvider)",
      "{",
      "}",
      "$0",
      "",
      "}"
    ],
    "description": "Inserts EfCoreRepositoryClass stub",
    "prefix": "xEfCoreRepositoryClassStub"
  },
  "emailAddressAttribute": {
    "body": [
      "[EmailAddress$1] $0"
    ],
    "description": "EmailAddress Attribute",
    "prefix": "xEmailAddressAttribute"
  },
  "filterProperty": {
    "body": [
      "public string Filter { get; set; }"
    ],
    "description": "Inserts property Filter",
    "prefix": "xFilterProperty"
  },
  "findByNameAsyncIRepository": {
    "body": "Task$2<${1:Type}> FindByNameAsync(string name);$0",
    "description": "Adds a FindByNameAsync method to an IRepository interface",
    "prefix": "xFindByNameAsyncIRepository"
  },
  "getListAsyncIRepository": {
    "body": "Task$3<List$2<${1:Type}>> GetListAsync(int skipCount, int maxResultCount, string sorting, string filter = null);$0",
    "description": "Adds a GetListAsync method to an IRepository interface",
    "prefix": "xGetListAsyncIRepository"
  },
  "getLookupAppService": {
    "body": [
      "public async Task$5<ListResultDto<$1LookupDto>> Get$1LookupAsync()",
      "{",
      "\tvar ${2:${1/(.*)/${1:/downcase}/}}s = await _${2:${1/(.*)/${1:/downcase}/}}Repository.GetListAsync();",
      "",
      "\treturn new ListResultDto<$1LookupDto>(ObjectMapper.Map<List$6<${1:Type}>, List<$1LookupDto>>(${2:${1/(.*)/${1:/downcase}/}}s));",
      "}"
    ],
    "description": "Adds a GetLookupAsync method to an AppService class",
    "prefix": "xGetLookupAppService"
  },
  "getLookupIAppService": {
    "body": "Task$2<ListResultDto<${1:Type}LookupDto>> Get$1LookupAsync();$0",
    "description": "Adds a GetLookupAsync method to an IAppService interface",
    "prefix": "xGetLookupIAppService"
  },
  "getPrivateSet": {
    "body": [
      "{ get; private set; }$0"
    ],
    "description": "Inserts { get, private set }",
    "prefix": "xGps"
  },
  "getRequiredIAppService": {
    "body": [
      "_${4:${1/(.*)/${1:/downcase}/}}AppService = GetRequiredService<I${1:Name}AppService$2>();$0",
      "private readonly I${3:$1}AppService _${5:$4}AppService$6;"
    ],
    "description": "Inserts GetRequiredService<IAppService> and IAppService field",
    "prefix": "xGetRequiredIAppService"
  },
  "getRequiredService": {
    "body": [
      "_${4:${1/(.*)/${1:/downcase}/}} = GetRequiredService<${1:NameService}$2>();$0",
      "private readonly ${3:$1} _${5:$4}$6;"
    ],
    "description": "Inserts GetRequiredService and matching field",
    "prefix": "xGetRequiredService"
  },
  "getSet": {
    "body": [
      "{ get; set; }$0"
    ],
    "description": "Inserts { get, set }",
    "prefix": "xGs"
  },
  "guidGeneratorCreate": {
    "body": "${1|GuidGenerator,_guidGenerator,guidGenerator|}.Create()$0",
    "description": "Inserts GuidGenerator.Create() statement",
    "prefix": "xGuidGeneratorCreate"
  },
  "hasOneWithManyForeignKeyRequired": {
    "body": [
      "b.HasOne<${1:Type}>().WithMany().HasForeignKey(x => x.$1Id).IsRequired();"
    ],
    "description": "Inserts HasOne<Type>().WithMany().ForeignKey().IsRequired statement",
    "prefix": "xHasOneWithManyForeignKeyRequired"
  },
  "iAppService": {
    "body": [
      "public interface ${TM_FILENAME_BASE} : IApplicationService$1",
      "{",
      "\tTask$3<${2:${TM_FILENAME_BASE/([\\I])(.*)(AppService)/$2/gi}}Dto$7> GetAsync(${4|int,Guid,string|}$5 id);",
      "",
      "\tTask<PagedResultDto<$2Dto>$6> GetListAsync(Get$2ListDto$8 input);",
      "",
      "\tTask<$2Dto> CreateAsync(Create$2Dto$9 input);",
      "",
      "\tTask UpdateAsync($4 id, Update$2Dto$10 input);",
      "",
      "\tTask DeleteAsync($4 id);$0",
      "",
      "}"
    ],
    "description": "Inserts a complete IAppService interface with CRUD methods for a given Type",
    "prefix": "xIAppService"
  },
  "iCrudAppServiceCreatUpdateDto": {
    "body": [
      "public interface ${TM_FILENAME_BASE} : ICrudAppService<${1:Type}Dto, ${2|int,Guid,string|}$3, PagedAndSortedResultRequestDto$4, CreateUpdate$1Dto>$0",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a completed ICrudAppService interface with CreateUpdateDto combined",
    "prefix": "xICrudAppServiceCreateUpdateDto"
  },
  "iCrudAppServiceCreateDtoUpdateDto": {
    "body": [
      "public interface ${TM_FILENAME_BASE} : ICrudAppService<${1:Type}Dto, ${2|int,Guid,string|}$3, PagedAndSortedResultRequestDto$4, Create$1Dto, Update$1Dto>$0",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a complete ICrudAppService interface with CreateDto and UpdateDto separated",
    "prefix": "xICrudAppServiceCreateDtoAndUpdateDto"
  },
  "iCrudMethodsAppService": {
    "body": [
      "Task$2<${1:ClassName}Dto$6> GetAsync(${3|int,Guid,string|}$4 id);",
      "",
      "Task<PagedResultDto<$1Dto>$5> GetListAsync(Get$1ListDto$7 input);",
      "",
      "Task<$1Dto> CreateAsync(Create$1Dto$8 input);",
      "",
      "Task UpdateAsync($3 id, Update$1Dto$9 input);",
      "",
      "Task DeleteAsync($3 id);$0"
    ],
    "description": "Inserts the basic CRUD methods in an IAppService",
    "prefix": "xCrudMethodsIAppService"
  },
  "iGuidGenerator guidGenerator": {
    "body": "IGuidGenerator$1 guidGenerator$0",
    "description": "Inserts a IGuidGenerator parameter in a constructor",
    "prefix": "xIGuidGenerator"
  },
  "iMongoCollection": {
    "body": "public IMongoCollection<${1:ClassName}$2> ${3:$1}s => Collection<$1>();$0",
    "description": "Inserts as IMongoCollection for a class statement in DbContext",
    "prefix": "xIMongoCollection"
  },
  "iRepository": {
    "body": "IRepository$1<${2:Type}, ${3|int,Guid,string|}> ${4:${2/(.*)/${1:/downcase}/}}Repository$0",
    "description": "Inserts a IRepository parameter in  a constructor",
    "prefix": "xIRepository"
  },
  "ifInlineStatement": {
    "body": [
      "if (${1:MyCondition}) $2",
      "$0"
    ],
    "description": "Inline if statement",
    "prefix": "xIfInline"
  },
  "ifIsGrantedAsyncPermission": {
    "body": [
      "// using ${WORKSPACE_NAME}.Permissions;",
      "// \"Menu:$3s\": \"$3s\", ",
      "if (await context.IsGrantedAsync(${WORKSPACE_NAME}Permissions$2.${3:ClassName}.Default))",
      "{",
      "\tvar ${4:${3/(.*)/${1:/downcase}/}}sMenu = new ApplicationMenuItem(\"$3sMenu\", l[\"Menu:$3s\"], url: \"/${5:${3/(.*)/${1:/downcase}/}}s\");",
      "\t${6:menuName}.AddItem($4sMenu);",
      "}$0"
    ],
    "description": "Inserts if (await IsGrantedAsync(permission)){ }statement",
    "prefix": "xIfIsGrantedAsyncPermission"
  },
  "ifNotNullInlineStatement": {
    "body": [
      "if (${1:MyVariable} != null) $2",
      "$0"
    ],
    "description": "Inline if not null statement",
    "prefix": "xIfNotNullInline"
  },
  "ifNotNullStatement": {
    "body": [
      "if (${1:MyVariable} != null)",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "If not null statement",
    "prefix": "xIfNotNull"
  },
  "ifNullInlineStatement": {
    "body": [
      "if (${1:MyVariable} == null) $2",
      "$0"
    ],
    "description": "Inline if not null statement",
    "prefix": "xIfNullInline"
  },
  "ifNullStatement": {
    "body": [
      "if (${1:MyVariable} == null)",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "If null statement",
    "prefix": "xIfNull"
  },
  "ifRepositoryGetCountAsync": {
    "body": [
      "if (await _${1:name}Repository.GetCountAsync$2() ${3|<,<=,==,!=,>=,>|} 0)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts if(await _repository.GetCountAsync() ? 0) statement",
    "prefix": "xIfRepoGetCountAsync"
  },
  "ifStatement": {
    "body": [
      "if (${1:MyCondition})",
      "{",
      "\t$2",
      "}",
      "$0"
    ],
    "description": "If statement",
    "prefix": "xIf"
  },
  "implementHasCreationTime": {
    "body": " IHasCreationTime$0",
    "description": "Implements IHasCreationTime interface",
    "prefix": "xImpIHasCreationTime"
  },
  "implementIApplicationService": {
    "body": " IApplicationService$0",
    "description": "Implements IApplicationService interface",
    "prefix": "xImpIApplicationService"
  },
  "implementIDataSeedContributor": {
    "body": " IDataSeedContributor$2, ITransientDependency$1$0",
    "description": "Implements IDataSeedContributor (+ ITransientDependency) interface",
    "prefix": "xImpIDataSeedContributor"
  },
  "implementIRepository": {
    "body": " IRepository$1<${2:Type}, ${3|int,Guid,string|}>$0",
    "description": "Implements IRepository interface",
    "prefix": "xImpIRepository"
  },
  "implementITransientDependency": {
    "body": " ITransientDependency$1",
    "description": "Implements ITransientDependency interface",
    "prefix": "xImpITransientDependency"
  },
  "inhBusinessException": {
    "body": " BusinessException$1",
    "description": "Inherits BusinessException class",
    "prefix": "xInhBusinessException"
  },
  "inhSpecification": {
    "body": " Specification$1<${2:Type}>",
    "description": "Inherits Specification class",
    "prefix": "xInhSpecification"
  },
  "inheritsAggregateRoot": {
    "body": " aggregateRoot<${1|int,Guid,string|}>$0",
    "description": "Inherits AggregateRoot class",
    "prefix": "xInhAggregateRoot"
  },
  "inheritsAppService": {
    "body": [
      " ${1:${WORKSPACE_NAME}}AppService$0"
    ],
    "description": "Inherits ProjectNameAppService class",
    "prefix": "xInhAppService"
  },
  "inheritsApplicationService": {
    "body": [
      " : ApplicationService$0"
    ],
    "description": "Inherits ApplicationService class",
    "prefix": "xInhApplicationService"
  },
  "inheritsApplicationTestBase": {
    "body": " ${WORKSPACE_NAME}ApplicationTestBase$0",
    "description": "Inherits ApplicationTestBase class",
    "prefix": "xInhApplicationTestBase"
  },
  "inheritsAuditedAggregateRoot": {
    "body": " AuditedAggregateRoot$1<${2|int,Guid,string|}>$0",
    "description": "Inherits AuditedAggregateRoot class",
    "prefix": "xInhAuditedAggregateRoot"
  },
  "inheritsAuditedEntity": {
    "body": " AuditedEntity$1<${2|int,Guid,string|}>$0",
    "description": "Inherits AuditedEntity class",
    "prefix": "xInhAuditedEntity"
  },
  "inheritsAuditedEntityDto": {
    "body": " AuditedEntityDto<${1|int,Guid,string|}>$0",
    "description": "Inherits AuditedEntityDto class",
    "prefix": "xInhAuditedEntityDto"
  },
  "inheritsCreationAuditedAggregateRoot": {
    "body": " CreationAuditedAggregateRoot$1<${2|int,Guid,string|}>$0",
    "description": "Inherits CreationAuditedAggregateRoot class",
    "prefix": "xInhCreationAuditedAggregateRoot"
  },
  "inheritsCreationAuditedEntity": {
    "body": " CreationAuditedEntity$1<${2|int,Guid,string|}>$0",
    "description": "Inherits CreationAuditedEntity class",
    "prefix": "xInhCreationAuditedEntity"
  },
  "inheritsCreationAuditedEntityDto": {
    "body": " CreationAuditedEntityDto$1<${2|int,Guid,string|}>$0",
    "description": "Inherits CreationAuditedEntityDto class",
    "prefix": "xInhCreationAuditedEntityDto"
  },
  "inheritsDomainService": {
    "body": " DomainService$1",
    "description": "Inherits DomainService class",
    "prefix": "xInhDomainService"
  },
  "inheritsDomainTestBase": {
    "body": " ${WORKSPACE_NAME}DomainTestBase$0",
    "description": "Inherits DomainTestBase class",
    "prefix": "xInhDomainTestBase"
  },
  "inheritsEntity": {
    "body": " Entity<${1|int,Guid,string|}>$0",
    "description": "Inherits Entity class",
    "prefix": "xInhEntity"
  },
  "inheritsEntityDto": {
    "body": " EntityDto$1<${2|int,Guid,string|}$3>$0",
    "description": "Inherits EntityDto class",
    "prefix": "xInhEntityDto"
  },
  "inheritsFullAuditedAggregateRoot": {
    "body": " FullAuditedAggregateRoot$1<${2|int,Guid,string|}>$0",
    "description": "Inherits FullAuditedAggregateRoot class",
    "prefix": "xInhFullAuditedAggregateRoot"
  },
  "inheritsFullAuditedEntity": {
    "body": " FullAuditedEntity$1<${2|int,Guid,string|}>$0",
    "description": "Inherits FullAuditedEntity class",
    "prefix": "xInhFullAuditedEntity"
  },
  "inheritsFullAuditedEntityDto": {
    "body": " FullAuditedEntityDto$1<${2|int,Guid,string|}>$0",
    "description": "Inherits FullAuditedEntityDto class",
    "prefix": "xInhFullAuditedEntityDto"
  },
  "inheritsPagedAndSortedResultRequestDto": {
    "body": " PagedAndSortedResultRequestDto$0",
    "description": "Inherits PagedAndSortedResultRequestDto class",
    "prefix": "xInhPagedAndSortedResultRequestDto"
  },
  "injectAppService": {
    "body": [
      "[Inject$1] ${2|protected,public|} I${4:$3}AppService ${3:Name}AppService { get; set; }$0"
    ],
    "description": "Inserts Inject IMyAppService MyAppService statement",
    "prefix": "xInjectAppService"
  },
  "injectHttpClient": {
    "body": [
      "[Inject$1] public HttpClient$2 ${3|HttpClient,Http|} { get; set; }$0"
    ],
    "description": "Inject HttpClient property",
    "prefix": "xInjectHttpClient"
  },
  "injectIJSRuntime": {
    "body": [
      "[Inject$1] public IJSRuntime$2 ${3|JSRuntime,Js|} { get; set; }$0"
    ],
    "description": "Inject IJSRuntime property",
    "prefix": "xInjectIJSRuntime"
  },
  "injectIMapper": {
    "body": [
      "[Inject$1] public IMapper$2 ${3:Mapper} { get; set; }$0"
    ],
    "description": "Inject IMapper property",
    "prefix": "xInjectIMapper"
  },
  "injectNavigationManager": {
    "body": [
      "[Inject$1] public NavigationManager$2 ${3|NavigationManager,Navigation,Nav|} { get; set; }$0"
    ],
    "description": "Inject NavigationManager property",
    "prefix": "xInjectNavigationManager"
  },
  "injectService": {
    "body": [
      "[Inject$1] ${2|protected,public|} I${4:$3} ${3:Name} { get; set; }$0"
    ],
    "description": "Inject IMyService MyService",
    "prefix": "xInjectService"
  },
  "methodAsync": {
    "body": [
      "${1|internal,private,public,protected|} async Task$2 ${3:MethodName}${4:Async}($5)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async Task method stub",
    "prefix": "xMethodAsync"
  },
  "methodAsyncReturn": {
    "body": [
      "${1|internal,private,public,protected|} async Task<${2:ReturnType}> ${3:MethodName}${4:Async}($5)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts an async task<ReturnType> method stub",
    "prefix": "xMethodAsyncReturn"
  },
  "methodReturn": {
    "body": [
      "${1|internal,private,public,protected|} ${2:ReturnType} ${3:MethodName}($4)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a <ReturnType> method stub",
    "prefix": "xMethodReturn"
  },
  "methodVoid": {
    "body": [
      "${1|internal,private,public,protected|} void ${2:MethodName}($3)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Inserts a void method stub",
    "prefix": "xMethodVoid"
  },
  "notNullAttribute": {
    "body": [
      "[NotNull$1] ${2:string} ${3:name}$0"
    ],
    "description": "NotNull attribute",
    "prefix": "xNotNullAttribute"
  },
  "objectMapperMap": {
    "body": "${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, ${3:DestinationType}>(${4:variable});$0",
    "description": "ObjectMapper.Map statement",
    "prefix": "xObjectMapperMap"
  },
  "onAfterRender": {
    "body": [
      "protected override void OnAfterRender(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnAfterRender method stub",
    "prefix": "xOnAfterRender"
  },
  "onAfterRenderAsync": {
    "body": [
      "protected override async Task$1 OnAfterRenderAsync(bool firstRender)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnAfterRenderAsync method stub",
    "prefix": "xOnAfterRenderAsync"
  },
  "onInitialized": {
    "body": [
      "protected override void OnInitialized()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnInitialized method stub",
    "prefix": "xOnInitialized"
  },
  "onInitializedAsync": {
    "body": [
      "protected override async Task$1 OnInitializedAsync()",
      "{",
      "\tawait base.OnInitializedAsync();",
      "\t$0",
      "}"
    ],
    "description": "OnInitializedAsync method stub",
    "prefix": "xOnInitializedAsync"
  },
  "onParametersSet": {
    "body": [
      "protected override void OnParametersSet()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnParameterSet method stub",
    "prefix": "xOnParametersSet"
  },
  "onParametersSetAsync": {
    "body": [
      "protected override async Task$1 OnParametersSetAsync()",
      "{",
      "\t$0",
      "}"
    ],
    "description": "OnParameterSetAsync method stub",
    "prefix": "xOnParametersSetAsync"
  },
  "permissionClass": {
    "body": [
      "public static class ${1:ClassName}",
      "{",
      "\tpublic const string Default = GroupName + \".$1\";",
      "\tpublic const string Create = Default + \".Create\";",
      "\tpublic const string Update = Default+ \".Update\";",
      "\tpublic const string Delete = Default + \".Delete\";",
      "}$0"
    ],
    "description": "Inserts a static class with Default/Create/Update/Delete constants",
    "prefix": "xPermissionClass"
  },
  "propPrivateSetter": {
    "body": "public ${1:int } ${2:MyProperty} { get; private set; }$0",
    "description": "property with private setter",
    "prefix": "xPropPrivateSetter"
  },
  "readOnlyListLookupDto": {
    "body": [
      "protected IReadOnlyList$4<${1:Type}LookupDto$3> ${2:${1/(.*)/${1:/downcase}/}}List = Array$5.Empty<$1LookupDto>();",
      "// ${2:${1/(.*)/${1:/downcase}/}}List = (await AppService.Get$1LookupAsync()).Items;"
    ],
    "description": "Inserts an IReadOnlyList for a LookupDto object",
    "prefix": "xReadOnlyListLookupDto"
  },
  "repoDeleteAsync": {
    "body": [
      "await _${1:name}Repository.DeleteAsync$3(id, autoSave:${2|false,true|});$0"
    ],
    "description": "Inserts repository.DeleteAsync statement",
    "prefix": "xRepoDeleteAsync"
  },
  "repoGetAsync": {
    "body": [
      "var ${1:VarName} = await _${2:$1}Repository.GetAsync$4(${3:id});",
      "$0"
    ],
    "description": "Inserts var VarName = repository.GetAsync statement",
    "prefix": "xRepoGetAsync"
  },
  "repoGetCountAsync": {
    "body": [
      "var ${1|totalCount,count,total|} = await ${2:Repository}.GetCountAsync$3();",
      "$0"
    ],
    "description": "Inserts var totalCount = repository.GetCountAsync statement",
    "prefix": "xRepoGetCountAsync"
  },
  "repoGetListAsync": {
    "body": [
      "var ${1:VarName}s = await _${2:$1}Repository.GetListAsync$3(input.SkipCount, input.MaxResultCount, input.Sorting, input.Filter);",
      "$0"
    ],
    "description": "Inserts var items = repository.GetListAsync statement",
    "prefix": "xRepoGetListAsync"
  },
  "repoInsertAsync": {
    "body": [
      "await _${1:name}Repository.InsertAsync(${2:$1}, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts repository.InsertAsync statement",
    "prefix": "xRepoInsertAsync"
  },
  "repoUpdateAsync": {
    "body": [
      "await _${1:name}Repository.UpdateAsync(${2:$1}, autoSave:${3|false,true|});$0"
    ],
    "description": "Inserts repository.UpdateAsync statement",
    "prefix": "xRepoUpdateAsync"
  },
  "requiredAttribute": {
    "body": [
      "[Required$1] $0"
    ],
    "description": "Required Attribute",
    "prefix": "xRequiredAttribute"
  },
  "returnDbSetFirstOrDefaultAsync": {
    "body": "return await DbSet.FirstOrDefaultAsync$1($2)$0;",
    "description": "Inserts return await DbSet.FirstOrDefaultAsync()",
    "prefix": "xReturnDbSetFirstOrDefaultAsync"
  },
  "returnListResultDto": {
    "body": [
      "return new ListResultDto<$3>(ObjectMapper.Map<List$1<${2:SourceType}>, List<${3:DestinationType}>>(${2/(.*)/${1:/downcase}/}s));",
      "$0"
    ],
    "description": "Inserts return new ListResultDto statement",
    "prefix": "xReturnListResultDto"
  },
  "returnObjectMapperMap": {
    "body": "return ${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, ${3:DestinationType}>(${4:variable});$0",
    "description": "return ObjectMapper.Map statement",
    "prefix": "xReturnObjectMapperMap"
  },
  "returnObjectMapperToDto": {
    "body": "return ${1|ObjectMapper,_objectMapper|}.Map<${2:SourceType}, $2Dto>(${1/(.*)/${1:/downcase}/}$3);$0",
    "description": "return ObjectMapper.Map from SourceType to Dto statement",
    "prefix": "xReturnObjectMapperToDto"
  },
  "returnPagedResultDto": {
    "body": [
      "return new PagedResultDto<$1Dto>(totalCount, ${1/(.*)/${1:/downcase}/}Dtos);$0"
    ],
    "description": "Inserts return new PagedResultDto statement",
    "prefix": "xReturnPagedResultDto"
  },
  "returnPagedResultDtoObjectMapper": {
    "body": [
      "return new PagedResultDto<$1Dto>(totalCount, ${1|ObjectMapper,_objectMapper|}.Map<List$3<${1:SourceType}>, List<$2Dto>>(${2/(.*)/${1:/downcase}/}s));$0"
    ],
    "description": "Inserts return new PagedResultDto with ObjectMapper statement",
    "prefix": "xReturnPagedResultDtoObjectMapper"
  },
  "stringLengthAttribute": {
    "body": [
      "[StringLength(${1:50})$2]$0"
    ],
    "description": "StringLength attribute",
    "prefix": "xStringLengthAttribute"
  },
  "throwBusinessException": {
    "body": [
      "throw new BusinessException$1(\"${2:TranslationKey}\");"
    ],
    "description": "Inserts throw new BusinessException statement",
    "prefix": "xThrowBusinessException"
  },
  "throwCustomException": {
    "body": [
      "throw new ${1:Name}Exception(\"${2:TranslationKey}\");"
    ],
    "description": "Inserts throw new CustomException statement",
    "prefix": "xThrowCustomException"
  },
  "throwEntityNotFoundException": {
    "body": [
      "throw new EntityNotFoundException$1($2);$0"
    ],
    "description": "Inserts throw new EntityNotFoundException statement",
    "prefix": "xThrowEntityNotFoundException"
  },
  "throwUserFriendlyException": {
    "body": [
      "throw new UserFriendlyException$1(\"${2:ExceptionMessage}\");"
    ],
    "description": "Inserts throw new UserFriendlyException statement",
    "prefix": "xThrowUserFriendlyException"
  },
  "unAssertThrowsAsyncAbpValidationException": {
    "body": [
      "var exception = await Assert.ThrowsAsync<AbpValidationException$1>(async () =>",
      "{",
      "\tawait _${2:name}AppService.${3|GetAsync,GetListAsync,CreateAsync,UpdateAsync,DeleteAsync|} (",
      "\t\tnew ${4:Name}Dto",
      "\t\t{",
      "\t\t\t${5:PropertyName} = ${6:PropertyValue}$7",
      "\t\t}",
      "\t);",
      "});",
      "",
      "exception.ValidationErrors.ShouldContain$8(err => err.MemberNames.Any$8(mem => mem == \"${9:$5}\"));"
    ],
    "description": "Inserts var exception = Assert.ThrowsAsync<AbpValidationException>",
    "prefix": "xUnAssertThrowsAsyncAbpValidationException"
  },
  "unAssertThrowsAsyncBusinessException": {
    "body": [
      "var exception = await Assert.ThrowsAsync<BusinessException>(async () =>",
      "{",
      "\t // statement that throws exception comes here",
      "\t $1",
      "});",
      "",
      "// exception.Code.ShouldBe(\"${2:YourExceptionCode}\");",
      "exception.Message.ShouldBe(\"${2:YourExceptionMessage}\");"
    ],
    "description": "Inserts var exception = Assert.ThrowsAsync<BusinessException>",
    "prefix": "xUnAssertThrowsAsyncBusinessException"
  },
  "unAssertThrowsAsyncCustomException": {
    "body": [
      "await Assert.ThrowsAsync<${1:YourCustomException}$2>(async () =>",
      "{",
      "\tawait _${3:name}AppService.${4|GetAsync,GetListAsync,CreateAsync,UpdateAsync,DeleteAsync|} (",
      "\t\tnew ${5:Name}Dto",
      "\t\t{",
      "\t\t\t${6:PropertyName} = ${7:PropertyValue}$8",
      "\t\t}",
      "\t);",
      "});"
    ],
    "description": "Inserts Assert.ThrowsAsync<YourCustomException>",
    "prefix": "xUnAssertThrowsAsyncCustomException"
  },
  "unAssertThrowsCustomException": {
    "body": [
      "Assert.Throws<${1:YourCustom}Exception$2>(() =>",
      "{",
      "\t // statement that throws exception comes here",
      "\t",
      "});"
    ],
    "description": "Inserts Assert.Throws<YourCustomException>",
    "prefix": "xUnAssertThrowsCustomException"
  },
  "unCreateAsyncAppService": {
    "body": [
      "var result = await _${3:${2/(.*)/${1:/downcase}/}}AppService.CreateAsync(",
      "\tnew ${1|CreateUpdate,Create|}${2:Type}Dto$4",
      "\t{",
      "\t\t${5:PropertyName} = ${6:PropertyValue}$7",
      "\t}",
      ");$0"
    ],
    "description": "Inserts var result = await AppService.CreateAsync statement",
    "prefix": "xUnCreateAsyncAppService"
  },
  "unGetListAsyncAppService": {
    "body": "var ${1:result} = await _${2:name}AppService.GetListAsync(${3:new PagedAndSortedResultRequestDto}$4()$5);$0",
    "description": "Inserts var result = await AppService.GetListAsync statement",
    "prefix": "xUnGetListAsyncAppService"
  },
  "unMethodTaskStub": {
    "body": [
      "[Fact$1]",
      "public async Task$2 Should_${3:Name_Of_Your_Test}()",
      "{",
      "\t $0",
      "",
      "",
      "}"
    ],
    "description": "a xUnit test Task method stub",
    "prefix": "xUnMethodTaskStub"
  },
  "unMethodVoidStub": {
    "body": [
      "[Fact$1]",
      "public void Should_${3:Name_Of_Your_Test}()",
      "{",
      "\t$0",
      "",
      "",
      "}"
    ],
    "description": "a xUnit test void method stub",
    "prefix": "xUnMethodVoidStub"
  },
  "unResultTotalCountShouldBeGreater": {
    "body": "result.TotalCount.ShouldBeGreaterThanOrEqualTo$1(${2:totalCount});$0",
    "description": "Inserts result.TotalCount.ShouldBeGreaterThanOrEqual statement",
    "prefix": "xUnResultTotalCountShouldBeGreater"
  },
  "xConstantGroupNamePermission": {
    "body": "public const string GroupName = \"${1:GroupName}\";$0",
    "description": "a GroupName constant",
    "prefix": "xConstantGroupNamePermission"
  }
}